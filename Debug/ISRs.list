
ISRs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004058  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf4  08009cf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cf4  08009cf4  00019cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cf8  08009cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000000c  08009d08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009d08  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dd1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002608  00000000  00000000  00032e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00035418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  000364d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b4fb  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de54  00000000  00000000  0006295b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106547  00000000  00000000  000707af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176cf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  00176d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005c7c 	.word	0x08005c7c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005c7c 	.word	0x08005c7c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fd3d 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80e 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f968 	bl	80007e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f8ec 	bl	80006ec <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f93a 	bl	800078c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000518:	f000 f8a4 	bl	8000664 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /*Initialize OLED Settings  */
  OLED_init();
 800051c:	f000 fa6e 	bl	80009fc <OLED_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* Print animation  */
	 printGif();
 8000520:	f000 fb0e 	bl	8000b40 <printGif>
 8000524:	e7fc      	b.n	8000520 <main+0x20>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0be      	sub	sp, #248	; 0xf8
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000532:	2248      	movs	r2, #72	; 0x48
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fb98 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2298      	movs	r2, #152	; 0x98
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fb8a 	bl	8005c6c <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000558:	2000      	movs	r0, #0
 800055a:	f001 fec3 	bl	80022e4 <HAL_PWREx_ControlVoltageScaling>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000564:	f000 fa42 	bl	80009ec <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000568:	f001 fe8c 	bl	8002284 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056c:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <SystemClock_Config+0x138>)
 800056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000572:	4a3b      	ldr	r2, [pc, #236]	; (8000660 <SystemClock_Config+0x138>)
 8000574:	f023 0318 	bic.w	r3, r3, #24
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057c:	2314      	movs	r3, #20
 800057e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000594:	2360      	movs	r3, #96	; 0x60
 8000596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005ac:	233c      	movs	r3, #60	; 0x3c
 80005ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff4f 	bl	800246c <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005d4:	f000 fa0a 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fc:	2105      	movs	r1, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fbbc 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800060a:	f000 f9ef 	bl	80009ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 800060e:	f242 0360 	movw	r3, #8288	; 0x2060
 8000612:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000618:	2300      	movs	r3, #0
 800061a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800061c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000620:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000622:	2301      	movs	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800062a:	2318      	movs	r3, #24
 800062c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800063a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800063e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fe4a 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 800064e:	f000 f9cd 	bl	80009ec <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000652:	f003 f9a7 	bl	80039a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000656:	bf00      	nop
 8000658:	37f8      	adds	r7, #248	; 0xf8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_I2C1_Init+0x7c>)
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_I2C1_Init+0x80>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200A26;
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_I2C1_Init+0x84>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_I2C1_Init+0x7c>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_I2C1_Init+0x7c>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x7c>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <MX_I2C1_Init+0x7c>)
 80006a0:	f000 fff0 	bl	8001684 <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 f99f 	bl	80009ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_I2C1_Init+0x7c>)
 80006b2:	f001 fbe7 	bl	8001e84 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f996 	bl	80009ec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x7c>)
 80006c4:	f001 fc29 	bl	8001f1a <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f98d 	bl	80009ec <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80006d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006d6:	f001 fc6d 	bl	8001fb4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00200a26 	.word	0x00200a26

080006ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_LPUART1_UART_Init+0x94>)
 80006f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_LPUART1_UART_Init+0x98>)
 80006fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 80006fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000702:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000736:	f003 fb25 	bl	8003d84 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f954 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 8000748:	f004 feff 	bl	800554a <HAL_UARTEx_SetTxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000752:	f000 f94b 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <MX_LPUART1_UART_Init+0x90>)
 800075a:	f004 ff34 	bl	80055c6 <HAL_UARTEx_SetRxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f942 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <MX_LPUART1_UART_Init+0x9c>)
 800076a:	f004 feb5 	bl	80054d8 <HAL_UARTEx_DisableFifoMode>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f93a 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000047c 	.word	0x2000047c
 8000780:	40008000 	.word	0x40008000
 8000784:	00033324 	.word	0x00033324
 8000788:	20000508 	.word	0x20000508

0800078c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000792:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000796:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800079a:	2206      	movs	r2, #6
 800079c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ca:	f001 fc13 	bl	8001ff4 <HAL_PCD_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f90a 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000074 	.word	0x20000074

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <MX_GPIO_Init+0x170>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a55      	ldr	r2, [pc, #340]	; (8000950 <MX_GPIO_Init+0x170>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_GPIO_Init+0x170>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <MX_GPIO_Init+0x170>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a4f      	ldr	r2, [pc, #316]	; (8000950 <MX_GPIO_Init+0x170>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_GPIO_Init+0x170>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <MX_GPIO_Init+0x170>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a49      	ldr	r2, [pc, #292]	; (8000950 <MX_GPIO_Init+0x170>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x170>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x170>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a43      	ldr	r2, [pc, #268]	; (8000950 <MX_GPIO_Init+0x170>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x170>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x170>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a3d      	ldr	r2, [pc, #244]	; (8000950 <MX_GPIO_Init+0x170>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x170>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800086e:	f001 fded 	bl	800244c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000878:	4836      	ldr	r0, [pc, #216]	; (8000954 <MX_GPIO_Init+0x174>)
 800087a:	f000 feb9 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_GPIO_Init+0x178>)
 8000884:	f000 feb4 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_GPIO_Init+0x17c>)
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4830      	ldr	r0, [pc, #192]	; (8000960 <MX_GPIO_Init+0x180>)
 800089e:	f000 fd15 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_GPIO_Init+0x17c>)
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x180>)
 80008b6:	f000 fd09 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008ba:	2308      	movs	r3, #8
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_GPIO_Init+0x17c>)
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 fcfc 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008d4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4819      	ldr	r0, [pc, #100]	; (8000954 <MX_GPIO_Init+0x174>)
 80008ee:	f000 fced 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0x178>)
 8000906:	f000 fce1 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_GPIO_Init+0x178>)
 8000922:	f000 fcd3 	bl	80012cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2006      	movs	r0, #6
 800092c:	f000 fc97 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000930:	2006      	movs	r0, #6
 8000932:	f000 fcb0 	bl	8001296 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2009      	movs	r0, #9
 800093c:	f000 fc8f 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000940:	2009      	movs	r0, #9
 8000942:	f000 fca8 	bl	8001296 <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400
 8000958:	48001800 	.word	0x48001800
 800095c:	10110000 	.word	0x10110000
 8000960:	48000800 	.word	0x48000800

08000964 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/*Interrupt Service Routine */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	uint32_t i, j;

	if(GPIO_Pin == GPIO_PIN_0) //Run if the EXTI0 is enable
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d117      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x40>
	{


		for( j = 0; j < 40; j++)
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e010      	b.n	800099c <HAL_GPIO_EXTI_Callback+0x38>
		{
			for(i = 0; i < 1000000; i++);
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e002      	b.n	8000986 <HAL_GPIO_EXTI_Callback+0x22>
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x80>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d9f8      	bls.n	8000980 <HAL_GPIO_EXTI_Callback+0x1c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  //User Led Blue
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000992:	f000 fe45 	bl	8001620 <HAL_GPIO_TogglePin>
		for( j = 0; j < 40; j++)
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b27      	cmp	r3, #39	; 0x27
 80009a0:	d9eb      	bls.n	800097a <HAL_GPIO_EXTI_Callback+0x16>

	}



}
 80009a2:	e01a      	b.n	80009da <HAL_GPIO_EXTI_Callback+0x76>
	else if(GPIO_Pin == GPIO_PIN_3) //Run if the EXTI3 is enable
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d117      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x76>
		for( j = 0; j < 40; j++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	e011      	b.n	80009d4 <HAL_GPIO_EXTI_Callback+0x70>
			for(i = 0; i < 1000000; i++);
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_EXTI_Callback+0x58>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d9f8      	bls.n	80009b6 <HAL_GPIO_EXTI_Callback+0x52>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //User Led Red
 80009c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80009ca:	f000 fe29 	bl	8001620 <HAL_GPIO_TogglePin>
		for( j = 0; j < 40; j++)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b27      	cmp	r3, #39	; 0x27
 80009d8:	d9ea      	bls.n	80009b0 <HAL_GPIO_EXTI_Callback+0x4c>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	000f423f 	.word	0x000f423f
 80009e8:	48000400 	.word	0x48000400

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <OLED_init>:

#define DELAY_GIF (1)
extern I2C_HandleTypeDef hi2c1;

uint8_t OLED_init()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* Check if the slave device is ready to start the communication */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_ADDRESS, 1, 20000) != HAL_OK)
 8000a00:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a04:	2201      	movs	r2, #1
 8000a06:	2178      	movs	r1, #120	; 0x78
 8000a08:	481f      	ldr	r0, [pc, #124]	; (8000a88 <OLED_init+0x8c>)
 8000a0a:	f000 ffbf 	bl	800198c <HAL_I2C_IsDeviceReady>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <OLED_init+0x1c>
	{
			/* Return false */
			return 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e035      	b.n	8000a84 <OLED_init+0x88>
	}

	writeCommand(0xae); //Display OFF
 8000a18:	20ae      	movs	r0, #174	; 0xae
 8000a1a:	f000 f861 	bl	8000ae0 <writeCommand>
	writeCommand(0xd5); //Set Dclk
 8000a1e:	20d5      	movs	r0, #213	; 0xd5
 8000a20:	f000 f85e 	bl	8000ae0 <writeCommand>
	writeCommand(0x50); //100 hz
 8000a24:	2050      	movs	r0, #80	; 0x50
 8000a26:	f000 f85b 	bl	8000ae0 <writeCommand>
	writeCommand(0x20); // Set row address
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f000 f858 	bl	8000ae0 <writeCommand>
	writeCommand(0x81); //Set contrast control
 8000a30:	2081      	movs	r0, #129	; 0x81
 8000a32:	f000 f855 	bl	8000ae0 <writeCommand>
	writeCommand(0x80); //
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	f000 f852 	bl	8000ae0 <writeCommand>
	writeCommand(0xa0); //Segment remap
 8000a3c:	20a0      	movs	r0, #160	; 0xa0
 8000a3e:	f000 f84f 	bl	8000ae0 <writeCommand>
	writeCommand(0xa4); //Set Entire Display On
 8000a42:	20a4      	movs	r0, #164	; 0xa4
 8000a44:	f000 f84c 	bl	8000ae0 <writeCommand>
	writeCommand(0xa6); //Normal Display
 8000a48:	20a6      	movs	r0, #166	; 0xa6
 8000a4a:	f000 f849 	bl	8000ae0 <writeCommand>
	writeCommand(0xad); //Set external VCC
 8000a4e:	20ad      	movs	r0, #173	; 0xad
 8000a50:	f000 f846 	bl	8000ae0 <writeCommand>
	writeCommand(0x80); //
 8000a54:	2080      	movs	r0, #128	; 0x80
 8000a56:	f000 f843 	bl	8000ae0 <writeCommand>
	writeCommand(0xc0); //Set common scan direction
 8000a5a:	20c0      	movs	r0, #192	; 0xc0
 8000a5c:	f000 f840 	bl	8000ae0 <writeCommand>
	writeCommand(0xd9); //Set phase length
 8000a60:	20d9      	movs	r0, #217	; 0xd9
 8000a62:	f000 f83d 	bl	8000ae0 <writeCommand>
	writeCommand(0x1f); //
 8000a66:	201f      	movs	r0, #31
 8000a68:	f000 f83a 	bl	8000ae0 <writeCommand>
	writeCommand(0xdb); //Set Vcomh voltage
 8000a6c:	20db      	movs	r0, #219	; 0xdb
 8000a6e:	f000 f837 	bl	8000ae0 <writeCommand>
	writeCommand(0x27); //
 8000a72:	2027      	movs	r0, #39	; 0x27
 8000a74:	f000 f834 	bl	8000ae0 <writeCommand>
	Clear_All_RAM();
 8000a78:	f000 f808 	bl	8000a8c <Clear_All_RAM>
	writeCommand(0xaf); //Display On
 8000a7c:	20af      	movs	r0, #175	; 0xaf
 8000a7e:	f000 f82f 	bl	8000ae0 <writeCommand>

	return 1;  /* If the device is ready return 1 */
 8000a82:	2301      	movs	r3, #1

}
 8000a84:	4618      	mov	r0, r3
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000028 	.word	0x20000028

08000a8c <Clear_All_RAM>:

void Clear_All_RAM(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	unsigned char i, j;
	/*Cycle for to clear all ram in each page */
	for(i = 0; i < PAGES; i++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e01b      	b.n	8000ad0 <Clear_All_RAM+0x44>
	{
		writeCommand(0xb0+i);  /*Skip to the next page  */
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	3b50      	subs	r3, #80	; 0x50
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f81e 	bl	8000ae0 <writeCommand>
		writeCommand(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f81b 	bl	8000ae0 <writeCommand>
		writeCommand(0x10);
 8000aaa:	2010      	movs	r0, #16
 8000aac:	f000 f818 	bl	8000ae0 <writeCommand>
		for( j = 0; j < HEIGHT; j++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	71bb      	strb	r3, [r7, #6]
 8000ab4:	e005      	b.n	8000ac2 <Clear_All_RAM+0x36>
		{
			writeData(0x00);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f82a 	bl	8000b10 <writeData>
		for( j = 0; j < HEIGHT; j++)
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71bb      	strb	r3, [r7, #6]
 8000ac2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	daf5      	bge.n	8000ab6 <Clear_All_RAM+0x2a>
	for(i = 0; i < PAGES; i++)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	3301      	adds	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d9e0      	bls.n	8000a98 <Clear_All_RAM+0xc>
		}
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <writeCommand>:

void writeCommand(uint8_t data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_COMMAND;  /*Value to indicate that the next value is a command config */
 8000aea:	2300      	movs	r3, #0
 8000aec:	733b      	strb	r3, [r7, #12]
	dt[1] = data; /* Command option */
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS , dt, 2, 10);  /*Function HAL to transmit through I2C port selected  */
 8000af2:	f107 020c 	add.w	r2, r7, #12
 8000af6:	230a      	movs	r3, #10
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2302      	movs	r3, #2
 8000afc:	2178      	movs	r1, #120	; 0x78
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <writeCommand+0x2c>)
 8000b00:	f000 fe50 	bl	80017a4 <HAL_I2C_Master_Transmit>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000028 	.word	0x20000028

08000b10 <writeData>:

void writeData(uint8_t data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_DATA; /*Value to indicate that the next value is data to write in the RAM Oled Screen */
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;     /*Value to write in the OLED Screen RAM */
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, dt, 2, 10);
 8000b22:	f107 020c 	add.w	r2, r7, #12
 8000b26:	230a      	movs	r3, #10
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	2178      	movs	r1, #120	; 0x78
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <writeData+0x2c>)
 8000b30:	f000 fe38 	bl	80017a4 <HAL_I2C_Master_Transmit>
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000028 	.word	0x20000028

08000b40 <printGif>:


void printGif()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	printBitmap(Screen1);
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <printGif+0x38>)
 8000b46:	f000 f827 	bl	8000b98 <printBitmap>
	printBitmap(Screen2);
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <printGif+0x3c>)
 8000b4c:	f000 f824 	bl	8000b98 <printBitmap>
	printBitmap(Screen3);
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <printGif+0x40>)
 8000b52:	f000 f821 	bl	8000b98 <printBitmap>
	printBitmap(Screen4);
 8000b56:	480b      	ldr	r0, [pc, #44]	; (8000b84 <printGif+0x44>)
 8000b58:	f000 f81e 	bl	8000b98 <printBitmap>
	printBitmap(Screen5);
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <printGif+0x48>)
 8000b5e:	f000 f81b 	bl	8000b98 <printBitmap>
	printBitmap(Screen6);
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <printGif+0x4c>)
 8000b64:	f000 f818 	bl	8000b98 <printBitmap>
	printBitmap(Screen7);
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <printGif+0x50>)
 8000b6a:	f000 f815 	bl	8000b98 <printBitmap>
	printBitmap(Screen8);
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <printGif+0x54>)
 8000b70:	f000 f812 	bl	8000b98 <printBitmap>



}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	08005ca4 	.word	0x08005ca4
 8000b7c:	080064a4 	.word	0x080064a4
 8000b80:	08006ca4 	.word	0x08006ca4
 8000b84:	080074a4 	.word	0x080074a4
 8000b88:	08007ca4 	.word	0x08007ca4
 8000b8c:	080084a4 	.word	0x080084a4
 8000b90:	08008ca4 	.word	0x08008ca4
 8000b94:	080094a4 	.word	0x080094a4

08000b98 <printBitmap>:


void printBitmap(const unsigned char* Bitmap)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	   unsigned char i, j, k;
	   /*Because the Bitmap is a vector we need to use auxiliary variable to send all information in the correct order  */
	   int d = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
	   k = 15;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	737b      	strb	r3, [r7, #13]

	    /*Cycles for to write all bitmap in all screen OLED */
	  	for(i = 0; i < PAGES; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e02a      	b.n	8000c04 <printBitmap+0x6c>
	  	{
	  		writeCommand(0xb0+i);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	3b50      	subs	r3, #80	; 0x50
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff93 	bl	8000ae0 <writeCommand>
	  		writeCommand(0x00);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff90 	bl	8000ae0 <writeCommand>
	  		writeCommand(0x10);
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f7ff ff8d 	bl	8000ae0 <writeCommand>
	  		for( j = 0; j < HEIGHT ; j++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73bb      	strb	r3, [r7, #14]
 8000bca:	e00f      	b.n	8000bec <printBitmap+0x54>
	  		{
	  			writeData(Bitmap[k + d]);
 8000bcc:	7b7a      	ldrb	r2, [r7, #13]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff98 	bl	8000b10 <writeData>
	  			d = d +16;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3310      	adds	r3, #16
 8000be4:	60bb      	str	r3, [r7, #8]
	  		for( j = 0; j < HEIGHT ; j++)
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	3301      	adds	r3, #1
 8000bea:	73bb      	strb	r3, [r7, #14]
 8000bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	daeb      	bge.n	8000bcc <printBitmap+0x34>
	  		}
	  		d = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	  		k--;
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	737b      	strb	r3, [r7, #13]
	  	for(i = 0; i < PAGES; i++)
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	d9d1      	bls.n	8000bae <printBitmap+0x16>
	  	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	; 0x60
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <HAL_I2C_MspInit+0x80>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12a      	bne.n	8000cd4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000c96:	f001 fbd9 	bl	800244c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration    
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cb8:	f000 fb08 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48001800 	.word	0x48001800

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12a      	bne.n	8000d60 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000d3a:	f001 fb87 	bl	800244c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d50:	2308      	movs	r3, #8
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d5c:	f000 fab6 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40008000 	.word	0x40008000
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001800 	.word	0x48001800

08000d74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d94:	d154      	bne.n	8000e40 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a2b      	ldr	r2, [pc, #172]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f000 fa7d 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f000 fa6f 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d114      	bne.n	8000e3c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000e2a:	f001 faff 	bl	800242c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <HAL_PCD_MspInit+0xd4>)
 8000e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e3a:	e001      	b.n	8000e40 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000e3c:	f001 faf6 	bl	800242c <HAL_PWREx_EnableVddUSB>
}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8c2 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fbd1 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000eba:	2008      	movs	r0, #8
 8000ebc:	f000 fbca 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <SystemInit+0x64>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <SystemInit+0x64>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <SystemInit+0x68>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <SystemInit+0x68>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <SystemInit+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <SystemInit+0x68>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <SystemInit+0x68>)
 8000ef0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ef4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ef8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <SystemInit+0x68>)
 8000efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SystemInit+0x68>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <SystemInit+0x68>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <SystemInit+0x68>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SystemInit+0x64>)
 8000f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	40021000 	.word	0x40021000

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f36:	e003      	b.n	8000f40 <LoopCopyDataInit>

08000f38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f3e:	3104      	adds	r1, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f48:	d3f6      	bcc.n	8000f38 <CopyDataInit>
	ldr	r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f4c:	e002      	b.n	8000f54 <LoopFillZerobss>

08000f4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f50:	f842 3b04 	str.w	r3, [r2], #4

08000f54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <LoopForever+0x16>)
	cmp	r2, r3
 8000f56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f58:	d3f9      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f5a:	f7ff ffb3 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f004 fe61 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff facd 	bl	8000500 <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000f6c:	08009cfc 	.word	0x08009cfc
	ldr	r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f74:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f78:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f7c:	20000598 	.word	0x20000598

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>

08000f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f95b 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f80e 	bl	8000fb4 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e001      	b.n	8000fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa4:	f7ff fe36 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d022      	beq.n	800100e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_InitTick+0x6c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f968 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d809      	bhi.n	8001002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f000 f932 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_InitTick+0x70>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e007      	b.n	8001012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e004      	b.n	8001012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x1c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x1c>)
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000594 	.word	0x20000594
 8001048:	20000008 	.word	0x20000008

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000594 	.word	0x20000594

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d004      	beq.n	8001088 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_Delay+0x40>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001088:	bf00      	nop
 800108a:	f7ff ffdf 	bl	800104c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d8f7      	bhi.n	800108a <HAL_Delay+0x26>
  {
  }
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e166      	b.n	80015aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8158 	beq.w	80015a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d00b      	beq.n	8001314 <HAL_GPIO_Init+0x48>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	2b11      	cmp	r3, #17
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0xea>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80b2 	beq.w	80015a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	4a60      	ldr	r2, [pc, #384]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6613      	str	r3, [r2, #96]	; 0x60
 800144c:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001458:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <HAL_GPIO_Init+0x300>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001482:	d02b      	beq.n	80014dc <HAL_GPIO_Init+0x210>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_GPIO_Init+0x304>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d025      	beq.n	80014d8 <HAL_GPIO_Init+0x20c>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x308>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d01f      	beq.n	80014d4 <HAL_GPIO_Init+0x208>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <HAL_GPIO_Init+0x204>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x310>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_GPIO_Init+0x200>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x314>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <HAL_GPIO_Init+0x1fc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x318>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1f8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_GPIO_Init+0x1f4>
 80014bc:	2307      	movs	r3, #7
 80014be:	e00e      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014c0:	2308      	movs	r3, #8
 80014c2:	e00c      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014c4:	2306      	movs	r3, #6
 80014c6:	e00a      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014c8:	2305      	movs	r3, #5
 80014ca:	e008      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014cc:	2304      	movs	r3, #4
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e004      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_GPIO_Init+0x212>
 80014dc:	2300      	movs	r3, #0
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	4093      	lsls	r3, r2
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ee:	4937      	ldr	r1, [pc, #220]	; (80015cc <HAL_GPIO_Init+0x300>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014fc:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001520:	4a32      	ldr	r2, [pc, #200]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800154a:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_GPIO_Init+0x320>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_GPIO_Init+0x320>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_GPIO_Init+0x320>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f ae91 	bne.w	80012dc <HAL_GPIO_Init+0x10>
  }
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	48000800 	.word	0x48000800
 80015d8:	48000c00 	.word	0x48000c00
 80015dc:	48001000 	.word	0x48001000
 80015e0:	48001400 	.word	0x48001400
 80015e4:	48001800 	.word	0x48001800
 80015e8:	48001c00 	.word	0x48001c00
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800160c:	e002      	b.n	8001614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001638:	887a      	ldrh	r2, [r7, #2]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800163e:	e002      	b.n	8001646 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f976 	bl	8000964 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e081      	b.n	800179a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fad6 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e006      	b.n	800170c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800170a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d104      	bne.n	800171e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	ea42 0103 	orr.w	r1, r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	021a      	lsls	r2, r3, #8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69d9      	ldr	r1, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	817b      	strh	r3, [r7, #10]
 80017b4:	4613      	mov	r3, r2
 80017b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	f040 80da 	bne.w	800197a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_I2C_Master_Transmit+0x30>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e0d3      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017dc:	f7ff fc36 	bl	800104c <HAL_GetTick>
 80017e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2319      	movs	r3, #25
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f9f7 	bl	8001be2 <I2C_WaitOnFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0be      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2221      	movs	r2, #33	; 0x21
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2210      	movs	r2, #16
 800180a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	893a      	ldrh	r2, [r7, #8]
 800181e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2bff      	cmp	r3, #255	; 0xff
 800182e:	d90e      	bls.n	800184e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	22ff      	movs	r2, #255	; 0xff
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183a:	b2da      	uxtb	r2, r3
 800183c:	8979      	ldrh	r1, [r7, #10]
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_I2C_Master_Transmit+0x1e0>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 faee 	bl	8001e28 <I2C_TransferConfig>
 800184c:	e06c      	b.n	8001928 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	b2da      	uxtb	r2, r3
 800185e:	8979      	ldrh	r1, [r7, #10]
 8001860:	4b48      	ldr	r3, [pc, #288]	; (8001984 <HAL_I2C_Master_Transmit+0x1e0>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 fadd 	bl	8001e28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800186e:	e05b      	b.n	8001928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	6a39      	ldr	r1, [r7, #32]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f9f4 	bl	8001c62 <I2C_WaitOnTXISFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e07b      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d034      	beq.n	8001928 <HAL_I2C_Master_Transmit+0x184>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d130      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f986 	bl	8001be2 <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e04d      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d90e      	bls.n	8001908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	8979      	ldrh	r1, [r7, #10]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fa91 	bl	8001e28 <I2C_TransferConfig>
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 fa80 	bl	8001e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d19e      	bne.n	8001870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f9d3 	bl	8001ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e01a      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_I2C_Master_Transmit+0x1e4>)
 800195a:	400b      	ands	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	80002000 	.word	0x80002000
 8001988:	fe00e800 	.word	0xfe00e800

0800198c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	460b      	mov	r3, r1
 800199a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	f040 80f1 	bne.w	8001b90 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
 80019c0:	e0e7      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2C_IsDeviceReady+0x44>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e0e0      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_I2C_IsDeviceReady+0x72>
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fc:	e004      	b.n	8001a08 <HAL_I2C_IsDeviceReady+0x7c>
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a04:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fb1d 	bl	800104c <HAL_GetTick>
 8001a12:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a40:	e034      	b.n	8001aac <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d01a      	beq.n	8001a80 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a4a:	f7ff faff 	bl	800104c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d302      	bcc.n	8001a60 <HAL_I2C_IsDeviceReady+0xd4>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e088      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_I2C_IsDeviceReady+0x12c>
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0c4      	beq.n	8001a42 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d01a      	beq.n	8001afc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2120      	movs	r1, #32
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f886 	bl	8001be2 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e058      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e04a      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	2120      	movs	r1, #32
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f86b 	bl	8001be2 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e03d      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2220      	movs	r2, #32
 8001b24:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d118      	bne.n	8001b60 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b3c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2120      	movs	r1, #32
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f84a 	bl	8001be2 <I2C_WaitOnFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e01c      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	f63f af3b 	bhi.w	80019e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d103      	bne.n	8001bb8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d007      	beq.n	8001bd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	619a      	str	r2, [r3, #24]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf2:	e022      	b.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d01e      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfc:	f7ff fa26 	bl	800104c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d302      	bcc.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d113      	bne.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f043 0220 	orr.w	r2, r3, #32
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4013      	ands	r3, r2
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d0cd      	beq.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c6e:	e02c      	b.n	8001cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f871 	bl	8001d5c <I2C_IsAcknowledgeFailed>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e02a      	b.n	8001cda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d01e      	beq.n	8001cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8c:	f7ff f9de 	bl	800104c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d302      	bcc.n	8001ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e007      	b.n	8001cda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d1cb      	bne.n	8001c70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cee:	e028      	b.n	8001d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f831 	bl	8001d5c <I2C_IsAcknowledgeFailed>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e026      	b.n	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff f9a2 	bl	800104c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d113      	bne.n	8001d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0220 	orr.w	r2, r3, #32
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e007      	b.n	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d1cf      	bne.n	8001cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d151      	bne.n	8001e1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d76:	e022      	b.n	8001dbe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d01e      	beq.n	8001dbe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d80:	f7ff f964 	bl	800104c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d302      	bcc.n	8001d96 <I2C_IsAcknowledgeFailed+0x3a>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d113      	bne.n	8001dbe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e02e      	b.n	8001e1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d1d5      	bne.n	8001d78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff fedc 	bl	8001b9a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <I2C_IsAcknowledgeFailed+0xc8>)
 8001dee:	400b      	ands	r3, r1
 8001df0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0204 	orr.w	r2, r3, #4
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	fe00e800 	.word	0xfe00e800

08001e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	817b      	strh	r3, [r7, #10]
 8001e36:	4613      	mov	r3, r2
 8001e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	0d5b      	lsrs	r3, r3, #21
 8001e44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <I2C_TransferConfig+0x58>)
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	ea02 0103 	and.w	r1, r2, r3
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e58:	7a7b      	ldrb	r3, [r7, #9]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	03ff63ff 	.word	0x03ff63ff

08001e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d138      	bne.n	8001f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e032      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d139      	bne.n	8001fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e033      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2224      	movs	r2, #36	; 0x24
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000

08001ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	b08f      	sub	sp, #60	; 0x3c
 8001ff8:	af0a      	add	r7, sp, #40	; 0x28
 8001ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e116      	b.n	8002234 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7fe fea7 	bl	8000d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fbb7 	bl	80057b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	687e      	ldr	r6, [r7, #4]
 8002052:	466d      	mov	r5, sp
 8002054:	f106 0410 	add.w	r4, r6, #16
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002064:	e885 0003 	stmia.w	r5, {r0, r1}
 8002068:	1d33      	adds	r3, r6, #4
 800206a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f003 fb51 	bl	8005714 <USB_CoreInit>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d7      	b.n	8002234 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fba5 	bl	80057da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e04a      	b.n	800212c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	333d      	adds	r3, #61	; 0x3d
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	333c      	adds	r3, #60	; 0x3c
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	b298      	uxth	r0, r3
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3342      	adds	r3, #66	; 0x42
 80020d2:	4602      	mov	r2, r0
 80020d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	333f      	adds	r3, #63	; 0x3f
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3344      	adds	r3, #68	; 0x44
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3348      	adds	r3, #72	; 0x48
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3350      	adds	r3, #80	; 0x50
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	3301      	adds	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3af      	bcc.n	8002096 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e044      	b.n	80021c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	3301      	adds	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3b5      	bcc.n	800213c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	687e      	ldr	r6, [r7, #4]
 80021d8:	466d      	mov	r5, sp
 80021da:	f106 0410 	add.w	r4, r6, #16
 80021de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ee:	1d33      	adds	r3, r6, #4
 80021f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f2:	6838      	ldr	r0, [r7, #0]
 80021f4:	f003 fb1c 	bl	8005830 <USB_DevInit>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e014      	b.n	8002234 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f80a 	bl	800223c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fcac 	bl	8005b8a <USB_DevDisconnect>

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800223c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	f043 0303 	orr.w	r3, r3, #3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b4:	d102      	bne.n	80022bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80022b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ba:	e00b      	b.n	80022d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ca:	d102      	bne.n	80022d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d0:	e000      	b.n	80022d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000

080022e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d141      	bne.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f2:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d131      	bne.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002306:	4a46      	ldr	r2, [pc, #280]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800230c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002318:	4a41      	ldr	r2, [pc, #260]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2232      	movs	r2, #50	; 0x32
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002336:	e002      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3b01      	subs	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d102      	bne.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f2      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d158      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e057      	b.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236a:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002374:	e04d      	b.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d141      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238a:	d131      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002392:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2232      	movs	r2, #50	; 0x32
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c2:	e002      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d102      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f2      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d112      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e011      	b.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002400:	e007      	b.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002410:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40007000 	.word	0x40007000
 8002424:	20000000 	.word	0x20000000
 8002428:	431bde83 	.word	0x431bde83

0800242c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6053      	str	r3, [r2, #4]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40007000 	.word	0x40007000

0800244c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6053      	str	r3, [r2, #4]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000

0800246c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f000 bc76 	b.w	8002d6c <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002480:	4ba1      	ldr	r3, [pc, #644]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248a:	4b9f      	ldr	r3, [pc, #636]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80e6 	beq.w	800266e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4c>
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	f040 808d 	bne.w	80025ca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 8089 	bne.w	80025ca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b8:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_RCC_OscConfig+0x66>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f000 bc4d 	b.w	8002d6c <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_RCC_OscConfig+0x80>
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_OscConfig+0x8c>
 80024ec:	4b86      	ldr	r3, [pc, #536]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d224      	bcs.n	8002546 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fe29 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f000 bc2d 	b.w	8002d6c <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002512:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7c      	ldr	r2, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b7a      	ldr	r3, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	4977      	ldr	r1, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002530:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4972      	ldr	r1, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e025      	b.n	8002592 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	496a      	ldr	r1, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4965      	ldr	r1, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fde8 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e3ec      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 fd1f 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002596:	4601      	mov	r1, r0
 8002598:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x2a0>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa21 f303 	lsr.w	r3, r1, r3
 80025ae:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_RCC_OscConfig+0x2a4>)
 80025b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025b2:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_OscConfig+0x2a8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fcfc 	bl	8000fb4 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d052      	beq.n	800266c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	e3d0      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d032      	beq.n	8002638 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025de:	f7fe fd35 	bl	800104c <HAL_GetTick>
 80025e2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e6:	f7fe fd31 	bl	800104c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e3b9      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002604:	4b40      	ldr	r3, [pc, #256]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a3f      	ldr	r2, [pc, #252]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	493a      	ldr	r1, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e01a      	b.n	800266e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002638:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a32      	ldr	r2, [pc, #200]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002644:	f7fe fd02 	bl	800104c <HAL_GetTick>
 8002648:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264c:	f7fe fcfe 	bl	800104c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e386      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1e0>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d073      	beq.n	8002762 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d10e      	bne.n	80026a4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d063      	beq.n	8002760 <HAL_RCC_OscConfig+0x2f4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d15f      	bne.n	8002760 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e363      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x250>
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0x28c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x274>
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0x28c>
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_RCC_OscConfig+0x29c>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fca4 	bl	800104c <HAL_GetTick>
 8002704:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	e010      	b.n	800272a <HAL_RCC_OscConfig+0x2be>
 8002708:	40021000 	.word	0x40021000
 800270c:	08009ca4 	.word	0x08009ca4
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fc98 	bl	800104c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e320      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x2ac>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fc88 	bl	800104c <HAL_GetTick>
 800273c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fc84 	bl	800104c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e30c      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002752:	4b96      	ldr	r3, [pc, #600]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d4>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d060      	beq.n	8002830 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x314>
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d119      	bne.n	80027ae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d116      	bne.n	80027ae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x32c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e2e9      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b84      	ldr	r3, [pc, #528]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	4981      	ldr	r1, [pc, #516]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	e040      	b.n	8002830 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d023      	beq.n	80027fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b6:	4b7d      	ldr	r3, [pc, #500]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7c      	ldr	r2, [pc, #496]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fc43 	bl	800104c <HAL_GetTick>
 80027c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fc3f 	bl	800104c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2c7      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	496d      	ldr	r1, [pc, #436]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e018      	b.n	8002830 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b6b      	ldr	r3, [pc, #428]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6a      	ldr	r2, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fc1f 	bl	800104c <HAL_GetTick>
 800280e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe fc1b 	bl	800104c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e2a3      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d07f      	beq.n	800293c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05f      	beq.n	8002904 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	429a      	cmp	r2, r3
 8002858:	d037      	beq.n	80028ca <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e27c      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800287c:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002882:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800288c:	f7fe fbde 	bl	800104c <HAL_GetTick>
 8002890:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7fe fbda 	bl	800104c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b11      	cmp	r3, #17
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e262      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ef      	bne.n	8002894 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	f023 0210 	bic.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	493a      	ldr	r1, [pc, #232]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	4a36      	ldr	r2, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fbb7 	bl	800104c <HAL_GetTick>
 80028de:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fbb3 	bl	800104c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b11      	cmp	r3, #17
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e23b      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f4:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <HAL_RCC_OscConfig+0x476>
 8002902:	e01b      	b.n	800293c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	4a28      	ldr	r2, [pc, #160]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fb9a 	bl	800104c <HAL_GetTick>
 8002918:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fb96 	bl	800104c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b11      	cmp	r3, #17
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e21e      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ef      	bne.n	800291c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80c1 	beq.w	8002acc <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10e      	bne.n	800297a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 8002962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002966:	6593      	str	r3, [r2, #88]	; 0x58
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCC_OscConfig+0x540>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x544>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_OscConfig+0x544>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_OscConfig+0x544>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe fb5b 	bl	800104c <HAL_GetTick>
 8002996:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002998:	e00c      	b.n	80029b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fb57 	bl	800104c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d905      	bls.n	80029b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1df      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4b99      	ldr	r3, [pc, #612]	; (8002c1c <HAL_RCC_OscConfig+0x7b0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ec      	beq.n	800299a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029cc:	4b94      	ldr	r3, [pc, #592]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	4990      	ldr	r1, [pc, #576]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a89      	ldr	r2, [pc, #548]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a02:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	4a85      	ldr	r2, [pc, #532]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a12:	e018      	b.n	8002a46 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a14:	4b82      	ldr	r3, [pc, #520]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a81      	ldr	r2, [pc, #516]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a24:	e00f      	b.n	8002a46 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a26:	4b7e      	ldr	r3, [pc, #504]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	4a7c      	ldr	r2, [pc, #496]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a36:	4b7a      	ldr	r3, [pc, #488]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fafd 	bl	800104c <HAL_GetTick>
 8002a52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe faf9 	bl	800104c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e17f      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ed      	beq.n	8002a56 <HAL_RCC_OscConfig+0x5ea>
 8002a7a:	e01d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fae6 	bl	800104c <HAL_GetTick>
 8002a80:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fae2 	bl	800104c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e168      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a9a:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ed      	bne.n	8002a84 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002aa8:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a56      	ldr	r2, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae6:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe faac 	bl	800104c <HAL_GetTick>
 8002af4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af8:	f7fe faa8 	bl	800104c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e130      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0a:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCC_OscConfig+0x68c>
 8002b18:	e01b      	b.n	8002b52 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b20:	4a3f      	ldr	r2, [pc, #252]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fa8f 	bl	800104c <HAL_GetTick>
 8002b2e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b32:	f7fe fa8b 	bl	800104c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e113      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ef      	bne.n	8002b32 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8107 	beq.w	8002d6a <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f040 80cf 	bne.w	8002d04 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d12c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	3b01      	subs	r3, #1
 8002b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d123      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d113      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d109      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d071      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d06c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0ba      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_RCC_OscConfig+0x7b4>)
 8002bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c02:	f7fe fa23 	bl	800104c <HAL_GetTick>
 8002c06:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	e00c      	b.n	8002c24 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fa1f 	bl	800104c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d905      	bls.n	8002c24 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0a7      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ec      	bne.n	8002c0a <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x90c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c40:	3a01      	subs	r2, #1
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c4a:	0212      	lsls	r2, r2, #8
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c52:	0852      	lsrs	r2, r2, #1
 8002c54:	3a01      	subs	r2, #1
 8002c56:	0552      	lsls	r2, r2, #21
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c5e:	0852      	lsrs	r2, r2, #1
 8002c60:	3a01      	subs	r2, #1
 8002c62:	0652      	lsls	r2, r2, #25
 8002c64:	4311      	orrs	r1, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c6a:	06d2      	lsls	r2, r2, #27
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	4941      	ldr	r1, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3e      	ldr	r2, [pc, #248]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c80:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8c:	f7fe f9de 	bl	800104c <HAL_GetTick>
 8002c90:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe f9da 	bl	800104c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e062      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb2:	e05a      	b.n	8002d6a <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e059      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d152      	bne.n	8002d6a <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cdc:	f7fe f9b6 	bl	800104c <HAL_GetTick>
 8002ce0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe f9b2 	bl	800104c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e03a      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x878>
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d02d      	beq.n	8002d66 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d28:	f023 0303 	bic.w	r3, r3, #3
 8002d2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f985 	bl	800104c <HAL_GetTick>
 8002d42:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe f981 	bl	800104c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e009      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x908>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x8da>
 8002d64:	e001      	b.n	8002d6a <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	019d800c 	.word	0x019d800c

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e10f      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 020f 	bic.w	r2, r3, #15
 8002daa:	4984      	ldr	r1, [pc, #528]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f7      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8089 	beq.w	8002ee4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d133      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0e4      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002dea:	f000 fa0f 	bl	800320c <RCC_GetSysClockFreqFromPLLSource>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <HAL_RCC_ClockConfig+0x248>)
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d955      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002df6:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e02:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0a:	4a6d      	ldr	r2, [pc, #436]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e044      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03e      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e2c:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e34:	4a62      	ldr	r2, [pc, #392]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e02f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0ac      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e62:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0a0      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e098      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e82:	f000 f8a7 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_RCC_ClockConfig+0x248>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d909      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e96:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4944      	ldr	r1, [pc, #272]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f8ca 	bl	800104c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe f8c6 	bl	800104c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e070      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f14:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d210      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 020f 	bic.w	r2, r3, #15
 8002f2c:	4923      	ldr	r1, [pc, #140]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_ClockConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e036      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4918      	ldr	r1, [pc, #96]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4910      	ldr	r1, [pc, #64]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f84:	f000 f826 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f88:	4601      	mov	r1, r0
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCC_ClockConfig+0x24c>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x250>)
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x254>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe f803 	bl	8000fb4 <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	04c4b400 	.word	0x04c4b400
 8002fc8:	08009ca4 	.word	0x08009ca4
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d121      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d11e      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d107      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e005      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003030:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003044:	e00a      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d102      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e004      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d101      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003058:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800305a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d133      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d002      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xa4>
 8003072:	2b03      	cmp	r3, #3
 8003074:	d003      	beq.n	800307e <HAL_RCC_GetSysClockFreq+0xaa>
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800307a:	617b      	str	r3, [r7, #20]
      break;
 800307c:	e005      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003080:	617b      	str	r3, [r7, #20]
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	617b      	str	r3, [r7, #20]
      break;
 8003088:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	3301      	adds	r3, #1
 8003096:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	fb02 f203 	mul.w	r2, r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	0e5b      	lsrs	r3, r3, #25
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ca:	69bb      	ldr	r3, [r7, #24]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3724      	adds	r7, #36	; 0x24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08009cbc 	.word	0x08009cbc
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4601      	mov	r1, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08009cb4 	.word	0x08009cb4

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003130:	f7ff ffda 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003134:	4601      	mov	r1, r0
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	08009cb4 	.word	0x08009cb4

08003158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003170:	f7ff f898 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
 8003176:	e014      	b.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003190:	f7ff f888 	bl	80022a4 <HAL_PWREx_GetVoltageRange>
 8003194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d10b      	bne.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d913      	bls.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2ba0      	cmp	r3, #160	; 0xa0
 80031b4:	d902      	bls.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b6:	2302      	movs	r3, #2
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e00d      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031bc:	2301      	movs	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e00a      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b7f      	cmp	r3, #127	; 0x7f
 80031c6:	d902      	bls.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e004      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d101      	bne.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d4:	2301      	movs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 020f 	bic.w	r2, r3, #15
 80031e0:	4909      	ldr	r1, [pc, #36]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	40022000 	.word	0x40022000

0800320c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d118      	bne.n	8003254 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003222:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e005      	b.n	800324a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d002      	beq.n	800326a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003264:	2b03      	cmp	r3, #3
 8003266:	d003      	beq.n	8003270 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003268:	e005      	b.n	8003276 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800326c:	613b      	str	r3, [r7, #16]
    break;
 800326e:	e005      	b.n	800327c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003272:	613b      	str	r3, [r7, #16]
    break;
 8003274:	e002      	b.n	800327c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	613b      	str	r3, [r7, #16]
    break;
 800327a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3301      	adds	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	fb02 f203 	mul.w	r2, r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	0e5b      	lsrs	r3, r3, #25
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032bc:	683b      	ldr	r3, [r7, #0]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08009cbc 	.word	0x08009cbc
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d03d      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d00b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d804      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d015      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800330c:	e01d      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800330e:	2b60      	cmp	r3, #96	; 0x60
 8003310:	d01e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d01c      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003316:	e018      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003318:	4b86      	ldr	r3, [pc, #536]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a85      	ldr	r2, [pc, #532]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003324:	e015      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fb49 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003336:	e00c      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3320      	adds	r3, #32
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fc30 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003348:	e003      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	74fb      	strb	r3, [r7, #19]
      break;
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003358:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800335e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003366:	4973      	ldr	r1, [pc, #460]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800336e:	e001      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d042      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d00f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xce>
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d805      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d011      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d017      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xee>
 800339a:	e01f      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x100>
 800339c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a0:	d01f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d01c      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a8:	e018      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033aa:	4b62      	ldr	r3, [pc, #392]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a61      	ldr	r2, [pc, #388]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b6:	e015      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fb00 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3320      	adds	r3, #32
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fbe7 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	74fb      	strb	r3, [r7, #19]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80033e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ea:	4b52      	ldr	r3, [pc, #328]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	494e      	ldr	r1, [pc, #312]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003400:	e001      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 809f 	beq.w	8003552 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003414:	2300      	movs	r3, #0
 8003416:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003428:	2300      	movs	r3, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a40      	ldr	r2, [pc, #256]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3a      	ldr	r2, [pc, #232]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003456:	f7fd fdf9 	bl	800104c <HAL_GetTick>
 800345a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345c:	e009      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fd fdf5 	bl	800104c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d902      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	74fb      	strb	r3, [r7, #19]
        break;
 8003470:	e005      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003472:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ef      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d15b      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01f      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d019      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ae:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ce:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d016      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd fdb4 	bl	800104c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e6:	e00b      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fd fdb0 	bl	800104c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d902      	bls.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	74fb      	strb	r3, [r7, #19]
            break;
 80034fe:	e006      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ec      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10c      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800352c:	e008      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	74bb      	strb	r3, [r7, #18]
 8003532:	e005      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003534:	40021000 	.word	0x40021000
 8003538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003540:	7c7b      	ldrb	r3, [r7, #17]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4ba0      	ldr	r3, [pc, #640]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	4a9f      	ldr	r2, [pc, #636]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355e:	4b9a      	ldr	r3, [pc, #616]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f023 0203 	bic.w	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	4996      	ldr	r1, [pc, #600]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003580:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 020c 	bic.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	498e      	ldr	r1, [pc, #568]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a2:	4b89      	ldr	r3, [pc, #548]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	4985      	ldr	r1, [pc, #532]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c4:	4b80      	ldr	r3, [pc, #512]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	497d      	ldr	r1, [pc, #500]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035e6:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f4:	4974      	ldr	r1, [pc, #464]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003616:	496c      	ldr	r1, [pc, #432]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362a:	4b67      	ldr	r3, [pc, #412]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003638:	4963      	ldr	r1, [pc, #396]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800364c:	4b5e      	ldr	r3, [pc, #376]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365a:	495b      	ldr	r1, [pc, #364]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366e:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	4952      	ldr	r1, [pc, #328]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003690:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	494a      	ldr	r1, [pc, #296]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b2:	4b45      	ldr	r3, [pc, #276]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	4941      	ldr	r1, [pc, #260]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d4:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	4939      	ldr	r1, [pc, #228]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d028      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	4930      	ldr	r1, [pc, #192]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003714:	d106      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003720:	60d3      	str	r3, [r2, #12]
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f945 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d04d      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800375c:	d108      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800376e:	e012      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378e:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379e:	d106      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]
 80037ac:	e020      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b6:	d109      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a02      	ldr	r2, [pc, #8]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	60d3      	str	r3, [r2, #12]
 80037c4:	e014      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f8f1 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037fc:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380a:	4965      	ldr	r1, [pc, #404]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381a:	d106      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a5f      	ldr	r2, [pc, #380]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003826:	60d3      	str	r3, [r2, #12]
 8003828:	e011      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003832:	d10c      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8c2 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386a:	494d      	ldr	r1, [pc, #308]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2102      	movs	r1, #2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f89d 	bl	80039c4 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038a4:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038aa:	f023 0204 	bic.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b4:	493a      	ldr	r1, [pc, #232]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ce:	f023 0218 	bic.w	r2, r3, #24
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	4931      	ldr	r1, [pc, #196]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d035      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038ec:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd fba8 	bl	800104c <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038fe:	e009      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003900:	f7fd fba4 	bl	800104c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d902      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	74fb      	strb	r3, [r7, #19]
        break;
 8003912:	e005      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003914:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ef      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d113      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003936:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3320      	adds	r3, #32
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f92d 	bl	8003ba4 <RCCEx_PLLSAI2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	490a      	ldr	r1, [pc, #40]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003994:	7cbb      	ldrb	r3, [r7, #18]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000

080039c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d103      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
       ||
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d13f      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e03c      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d00c      	beq.n	8003a1e <RCCEx_PLLSAI1_Config+0x5a>
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d013      	beq.n	8003a30 <RCCEx_PLLSAI1_Config+0x6c>
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d120      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d11d      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e01a      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a1e:	4b5d      	ldr	r3, [pc, #372]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2e:	e013      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a30:	4b58      	ldr	r3, [pc, #352]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10f      	bne.n	8003a5c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3c:	4b55      	ldr	r3, [pc, #340]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4c:	e006      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      break;
 8003a52:	e004      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a54:	bf00      	nop
 8003a56:	e002      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a58:	bf00      	nop
 8003a5a:	e000      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a64:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4948      	ldr	r1, [pc, #288]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 8086 	bne.w	8003b8a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a7e:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a44      	ldr	r2, [pc, #272]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8a:	f7fd fadf 	bl	800104c <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a90:	e009      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a92:	f7fd fadb 	bl	800104c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d902      	bls.n	8003aa6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa4:	e005      	b.n	8003ab2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d168      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	06d2      	lsls	r2, r2, #27
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6852      	ldr	r2, [r2, #4]
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	430a      	orrs	r2, r1
 8003ade:	492d      	ldr	r1, [pc, #180]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	610b      	str	r3, [r1, #16]
 8003ae4:	e02d      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d115      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aec:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6912      	ldr	r2, [r2, #16]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0552      	lsls	r2, r2, #21
 8003b04:	4311      	orrs	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6852      	ldr	r2, [r2, #4]
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	4920      	ldr	r1, [pc, #128]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
 8003b16:	e014      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6952      	ldr	r2, [r2, #20]
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0652      	lsls	r2, r2, #25
 8003b30:	4311      	orrs	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6852      	ldr	r2, [r2, #4]
 8003b36:	3a01      	subs	r2, #1
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	4915      	ldr	r1, [pc, #84]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fd fa7d 	bl	800104c <HAL_GetTick>
 8003b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b54:	e009      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b56:	f7fd fa79 	bl	800104c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d902      	bls.n	8003b6a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	73fb      	strb	r3, [r7, #15]
          break;
 8003b68:	e005      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ef      	beq.n	8003b56 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	07ff800f 	.word	0x07ff800f
 8003b9c:	ff9f800f 	.word	0xff9f800f
 8003ba0:	f9ff800f 	.word	0xf9ff800f

08003ba4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bb2:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0203 	and.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d103      	bne.n	8003bd6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d13f      	bne.n	8003c56 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	e03c      	b.n	8003c56 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d00c      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0x5a>
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d013      	beq.n	8003c10 <RCCEx_PLLSAI2_Config+0x6c>
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d120      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11d      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e01a      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bfe:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0e:	e013      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c10:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c1c:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c2c:	e006      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
      break;
 8003c32:	e004      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c3c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d108      	bne.n	8003c56 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c44:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4948      	ldr	r1, [pc, #288]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 8086 	bne.w	8003d6a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c5e:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a44      	ldr	r2, [pc, #272]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd f9ef 	bl	800104c <HAL_GetTick>
 8003c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c70:	e009      	b.n	8003c86 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c72:	f7fd f9eb 	bl	800104c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d902      	bls.n	8003c86 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	73fb      	strb	r3, [r7, #15]
        break;
 8003c84:	e005      	b.n	8003c92 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ef      	bne.n	8003c72 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d168      	bne.n	8003d6a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d113      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	0211      	lsls	r1, r2, #8
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68d2      	ldr	r2, [r2, #12]
 8003cb0:	06d2      	lsls	r2, r2, #27
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6852      	ldr	r2, [r2, #4]
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	492d      	ldr	r1, [pc, #180]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
 8003cc4:	e02d      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d115      	bne.n	8003cf8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
 8003cd8:	0211      	lsls	r1, r2, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6912      	ldr	r2, [r2, #16]
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0552      	lsls	r2, r2, #21
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6852      	ldr	r2, [r2, #4]
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	4920      	ldr	r1, [pc, #128]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	614b      	str	r3, [r1, #20]
 8003cf6:	e014      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	0211      	lsls	r1, r2, #8
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6952      	ldr	r2, [r2, #20]
 8003d0a:	0852      	lsrs	r2, r2, #1
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0652      	lsls	r2, r2, #25
 8003d10:	4311      	orrs	r1, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6852      	ldr	r2, [r2, #4]
 8003d16:	3a01      	subs	r2, #1
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	4915      	ldr	r1, [pc, #84]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd f98d 	bl	800104c <HAL_GetTick>
 8003d32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d34:	e009      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d36:	f7fd f989 	bl	800104c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d902      	bls.n	8003d4a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	73fb      	strb	r3, [r7, #15]
          break;
 8003d48:	e005      	b.n	8003d56 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	07ff800f 	.word	0x07ff800f
 8003d7c:	ff9f800f 	.word	0xff9f800f
 8003d80:	f9ff800f 	.word	0xf9ff800f

08003d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e042      	b.n	8003e1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc ff9d 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	; 0x24
 8003db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f82e 	bl	8003e28 <UART_SetConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e022      	b.n	8003e1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f001 fa10 	bl	8005204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f001 fa97 	bl	8005348 <UART_CheckIdleState>
 8003e1a:	4603      	mov	r3, r0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	0000      	movs	r0, r0
	...

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e2c:	b08a      	sub	sp, #40	; 0x28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4baa      	ldr	r3, [pc, #680]	; (8004110 <UART_SetConfig+0x2e8>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a9f      	ldr	r2, [pc, #636]	; (8004114 <UART_SetConfig+0x2ec>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003eae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f023 010f 	bic.w	r1, r3, #15
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a90      	ldr	r2, [pc, #576]	; (8004118 <UART_SetConfig+0x2f0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d126      	bne.n	8003f2a <UART_SetConfig+0x102>
 8003edc:	4b8f      	ldr	r3, [pc, #572]	; (800411c <UART_SetConfig+0x2f4>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d81a      	bhi.n	8003f20 <UART_SetConfig+0xf8>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0xc8>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e116      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e112      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e10e      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e10a      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	bf00      	nop
 8003f28:	e105      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7c      	ldr	r2, [pc, #496]	; (8004120 <UART_SetConfig+0x2f8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d138      	bne.n	8003fa6 <UART_SetConfig+0x17e>
 8003f34:	4b79      	ldr	r3, [pc, #484]	; (800411c <UART_SetConfig+0x2f4>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d82c      	bhi.n	8003f9c <UART_SetConfig+0x174>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x120>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f7d 	.word	0x08003f7d
 8003f4c:	08003f9d 	.word	0x08003f9d
 8003f50:	08003f9d 	.word	0x08003f9d
 8003f54:	08003f9d 	.word	0x08003f9d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f9d 	.word	0x08003f9d
 8003f60:	08003f9d 	.word	0x08003f9d
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003f95 	.word	0x08003f95
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e0d8      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f84:	2302      	movs	r3, #2
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e0d4      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e0d0      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f94:	2308      	movs	r3, #8
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e0cc      	b.n	8004136 <UART_SetConfig+0x30e>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa2:	bf00      	nop
 8003fa4:	e0c7      	b.n	8004136 <UART_SetConfig+0x30e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <UART_SetConfig+0x2fc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d125      	bne.n	8003ffc <UART_SetConfig+0x1d4>
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	; (800411c <UART_SetConfig+0x2f4>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d011      	beq.n	8003fe2 <UART_SetConfig+0x1ba>
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d802      	bhi.n	8003fc8 <UART_SetConfig+0x1a0>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <UART_SetConfig+0x1aa>
 8003fc6:	e014      	b.n	8003ff2 <UART_SetConfig+0x1ca>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d006      	beq.n	8003fda <UART_SetConfig+0x1b2>
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d00c      	beq.n	8003fea <UART_SetConfig+0x1c2>
 8003fd0:	e00f      	b.n	8003ff2 <UART_SetConfig+0x1ca>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd8:	e0ad      	b.n	8004136 <UART_SetConfig+0x30e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe0:	e0a9      	b.n	8004136 <UART_SetConfig+0x30e>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe8:	e0a5      	b.n	8004136 <UART_SetConfig+0x30e>
 8003fea:	2308      	movs	r3, #8
 8003fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff0:	e0a1      	b.n	8004136 <UART_SetConfig+0x30e>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff8:	bf00      	nop
 8003ffa:	e09c      	b.n	8004136 <UART_SetConfig+0x30e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a49      	ldr	r2, [pc, #292]	; (8004128 <UART_SetConfig+0x300>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d125      	bne.n	8004052 <UART_SetConfig+0x22a>
 8004006:	4b45      	ldr	r3, [pc, #276]	; (800411c <UART_SetConfig+0x2f4>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d011      	beq.n	8004038 <UART_SetConfig+0x210>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d802      	bhi.n	800401e <UART_SetConfig+0x1f6>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <UART_SetConfig+0x200>
 800401c:	e014      	b.n	8004048 <UART_SetConfig+0x220>
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d006      	beq.n	8004030 <UART_SetConfig+0x208>
 8004022:	2bc0      	cmp	r3, #192	; 0xc0
 8004024:	d00c      	beq.n	8004040 <UART_SetConfig+0x218>
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x220>
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e082      	b.n	8004136 <UART_SetConfig+0x30e>
 8004030:	2302      	movs	r3, #2
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e07e      	b.n	8004136 <UART_SetConfig+0x30e>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e07a      	b.n	8004136 <UART_SetConfig+0x30e>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004046:	e076      	b.n	8004136 <UART_SetConfig+0x30e>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	bf00      	nop
 8004050:	e071      	b.n	8004136 <UART_SetConfig+0x30e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a35      	ldr	r2, [pc, #212]	; (800412c <UART_SetConfig+0x304>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d129      	bne.n	80040b0 <UART_SetConfig+0x288>
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <UART_SetConfig+0x2f4>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406a:	d014      	beq.n	8004096 <UART_SetConfig+0x26e>
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d802      	bhi.n	8004078 <UART_SetConfig+0x250>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <UART_SetConfig+0x25e>
 8004076:	e016      	b.n	80040a6 <UART_SetConfig+0x27e>
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d007      	beq.n	800408e <UART_SetConfig+0x266>
 800407e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004082:	d00c      	beq.n	800409e <UART_SetConfig+0x276>
 8004084:	e00f      	b.n	80040a6 <UART_SetConfig+0x27e>
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408c:	e053      	b.n	8004136 <UART_SetConfig+0x30e>
 800408e:	2302      	movs	r3, #2
 8004090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004094:	e04f      	b.n	8004136 <UART_SetConfig+0x30e>
 8004096:	2304      	movs	r3, #4
 8004098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409c:	e04b      	b.n	8004136 <UART_SetConfig+0x30e>
 800409e:	2308      	movs	r3, #8
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a4:	e047      	b.n	8004136 <UART_SetConfig+0x30e>
 80040a6:	2310      	movs	r3, #16
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ac:	bf00      	nop
 80040ae:	e042      	b.n	8004136 <UART_SetConfig+0x30e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <UART_SetConfig+0x2ec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d13a      	bne.n	8004130 <UART_SetConfig+0x308>
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <UART_SetConfig+0x2f4>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d014      	beq.n	80040f4 <UART_SetConfig+0x2cc>
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d802      	bhi.n	80040d6 <UART_SetConfig+0x2ae>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <UART_SetConfig+0x2bc>
 80040d4:	e016      	b.n	8004104 <UART_SetConfig+0x2dc>
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040da:	d007      	beq.n	80040ec <UART_SetConfig+0x2c4>
 80040dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e0:	d00c      	beq.n	80040fc <UART_SetConfig+0x2d4>
 80040e2:	e00f      	b.n	8004104 <UART_SetConfig+0x2dc>
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e024      	b.n	8004136 <UART_SetConfig+0x30e>
 80040ec:	2302      	movs	r3, #2
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e020      	b.n	8004136 <UART_SetConfig+0x30e>
 80040f4:	2304      	movs	r3, #4
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e01c      	b.n	8004136 <UART_SetConfig+0x30e>
 80040fc:	2308      	movs	r3, #8
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e018      	b.n	8004136 <UART_SetConfig+0x30e>
 8004104:	2310      	movs	r3, #16
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	bf00      	nop
 800410c:	e013      	b.n	8004136 <UART_SetConfig+0x30e>
 800410e:	bf00      	nop
 8004110:	cfff69f3 	.word	0xcfff69f3
 8004114:	40008000 	.word	0x40008000
 8004118:	40013800 	.word	0x40013800
 800411c:	40021000 	.word	0x40021000
 8004120:	40004400 	.word	0x40004400
 8004124:	40004800 	.word	0x40004800
 8004128:	40004c00 	.word	0x40004c00
 800412c:	40005000 	.word	0x40005000
 8004130:	2310      	movs	r3, #16
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a86      	ldr	r2, [pc, #536]	; (8004354 <UART_SetConfig+0x52c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	f040 8422 	bne.w	8004986 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004146:	2b08      	cmp	r3, #8
 8004148:	f200 8173 	bhi.w	8004432 <UART_SetConfig+0x60a>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x32c>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004179 	.word	0x08004179
 8004158:	08004433 	.word	0x08004433
 800415c:	0800421b 	.word	0x0800421b
 8004160:	08004433 	.word	0x08004433
 8004164:	080042b3 	.word	0x080042b3
 8004168:	08004433 	.word	0x08004433
 800416c:	08004433 	.word	0x08004433
 8004170:	08004433 	.word	0x08004433
 8004174:	08004385 	.word	0x08004385
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004178:	f7fe ffc2 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 800417c:	4602      	mov	r2, r0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d044      	beq.n	8004210 <UART_SetConfig+0x3e8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b01      	cmp	r3, #1
 800418c:	d03e      	beq.n	800420c <UART_SetConfig+0x3e4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b02      	cmp	r3, #2
 8004194:	d038      	beq.n	8004208 <UART_SetConfig+0x3e0>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b03      	cmp	r3, #3
 800419c:	d032      	beq.n	8004204 <UART_SetConfig+0x3dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d02c      	beq.n	8004200 <UART_SetConfig+0x3d8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d026      	beq.n	80041fc <UART_SetConfig+0x3d4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d020      	beq.n	80041f8 <UART_SetConfig+0x3d0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b07      	cmp	r3, #7
 80041bc:	d01a      	beq.n	80041f4 <UART_SetConfig+0x3cc>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d014      	beq.n	80041f0 <UART_SetConfig+0x3c8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d00e      	beq.n	80041ec <UART_SetConfig+0x3c4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	d008      	beq.n	80041e8 <UART_SetConfig+0x3c0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b0b      	cmp	r3, #11
 80041dc:	d102      	bne.n	80041e4 <UART_SetConfig+0x3bc>
 80041de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e2:	e016      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e014      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	e012      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	e010      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041f0:	2320      	movs	r3, #32
 80041f2:	e00e      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041f4:	2310      	movs	r3, #16
 80041f6:	e00c      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041f8:	230c      	movs	r3, #12
 80041fa:	e00a      	b.n	8004212 <UART_SetConfig+0x3ea>
 80041fc:	230a      	movs	r3, #10
 80041fe:	e008      	b.n	8004212 <UART_SetConfig+0x3ea>
 8004200:	2308      	movs	r3, #8
 8004202:	e006      	b.n	8004212 <UART_SetConfig+0x3ea>
 8004204:	2306      	movs	r3, #6
 8004206:	e004      	b.n	8004212 <UART_SetConfig+0x3ea>
 8004208:	2304      	movs	r3, #4
 800420a:	e002      	b.n	8004212 <UART_SetConfig+0x3ea>
 800420c:	2302      	movs	r3, #2
 800420e:	e000      	b.n	8004212 <UART_SetConfig+0x3ea>
 8004210:	2301      	movs	r3, #1
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004218:	e10e      	b.n	8004438 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <UART_SetConfig+0x484>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b01      	cmp	r3, #1
 8004228:	d03e      	beq.n	80042a8 <UART_SetConfig+0x480>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b02      	cmp	r3, #2
 8004230:	d038      	beq.n	80042a4 <UART_SetConfig+0x47c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b03      	cmp	r3, #3
 8004238:	d032      	beq.n	80042a0 <UART_SetConfig+0x478>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b04      	cmp	r3, #4
 8004240:	d02c      	beq.n	800429c <UART_SetConfig+0x474>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b05      	cmp	r3, #5
 8004248:	d026      	beq.n	8004298 <UART_SetConfig+0x470>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b06      	cmp	r3, #6
 8004250:	d020      	beq.n	8004294 <UART_SetConfig+0x46c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b07      	cmp	r3, #7
 8004258:	d01a      	beq.n	8004290 <UART_SetConfig+0x468>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b08      	cmp	r3, #8
 8004260:	d014      	beq.n	800428c <UART_SetConfig+0x464>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b09      	cmp	r3, #9
 8004268:	d00e      	beq.n	8004288 <UART_SetConfig+0x460>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b0a      	cmp	r3, #10
 8004270:	d008      	beq.n	8004284 <UART_SetConfig+0x45c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b0b      	cmp	r3, #11
 8004278:	d102      	bne.n	8004280 <UART_SetConfig+0x458>
 800427a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800427e:	e016      	b.n	80042ae <UART_SetConfig+0x486>
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <UART_SetConfig+0x530>)
 8004282:	e014      	b.n	80042ae <UART_SetConfig+0x486>
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <UART_SetConfig+0x534>)
 8004286:	e012      	b.n	80042ae <UART_SetConfig+0x486>
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <UART_SetConfig+0x538>)
 800428a:	e010      	b.n	80042ae <UART_SetConfig+0x486>
 800428c:	4b35      	ldr	r3, [pc, #212]	; (8004364 <UART_SetConfig+0x53c>)
 800428e:	e00e      	b.n	80042ae <UART_SetConfig+0x486>
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <UART_SetConfig+0x540>)
 8004292:	e00c      	b.n	80042ae <UART_SetConfig+0x486>
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <UART_SetConfig+0x544>)
 8004296:	e00a      	b.n	80042ae <UART_SetConfig+0x486>
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <UART_SetConfig+0x548>)
 800429a:	e008      	b.n	80042ae <UART_SetConfig+0x486>
 800429c:	4b35      	ldr	r3, [pc, #212]	; (8004374 <UART_SetConfig+0x54c>)
 800429e:	e006      	b.n	80042ae <UART_SetConfig+0x486>
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <UART_SetConfig+0x550>)
 80042a2:	e004      	b.n	80042ae <UART_SetConfig+0x486>
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <UART_SetConfig+0x554>)
 80042a6:	e002      	b.n	80042ae <UART_SetConfig+0x486>
 80042a8:	4b35      	ldr	r3, [pc, #212]	; (8004380 <UART_SetConfig+0x558>)
 80042aa:	e000      	b.n	80042ae <UART_SetConfig+0x486>
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <UART_SetConfig+0x530>)
 80042ae:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80042b0:	e0c2      	b.n	8004438 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042b2:	f7fe fe8f 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d044      	beq.n	800434a <UART_SetConfig+0x522>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d03e      	beq.n	8004346 <UART_SetConfig+0x51e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d038      	beq.n	8004342 <UART_SetConfig+0x51a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d032      	beq.n	800433e <UART_SetConfig+0x516>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d02c      	beq.n	800433a <UART_SetConfig+0x512>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d026      	beq.n	8004336 <UART_SetConfig+0x50e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d020      	beq.n	8004332 <UART_SetConfig+0x50a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b07      	cmp	r3, #7
 80042f6:	d01a      	beq.n	800432e <UART_SetConfig+0x506>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d014      	beq.n	800432a <UART_SetConfig+0x502>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b09      	cmp	r3, #9
 8004306:	d00e      	beq.n	8004326 <UART_SetConfig+0x4fe>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b0a      	cmp	r3, #10
 800430e:	d008      	beq.n	8004322 <UART_SetConfig+0x4fa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b0b      	cmp	r3, #11
 8004316:	d102      	bne.n	800431e <UART_SetConfig+0x4f6>
 8004318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800431c:	e016      	b.n	800434c <UART_SetConfig+0x524>
 800431e:	2301      	movs	r3, #1
 8004320:	e014      	b.n	800434c <UART_SetConfig+0x524>
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	e012      	b.n	800434c <UART_SetConfig+0x524>
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	e010      	b.n	800434c <UART_SetConfig+0x524>
 800432a:	2320      	movs	r3, #32
 800432c:	e00e      	b.n	800434c <UART_SetConfig+0x524>
 800432e:	2310      	movs	r3, #16
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x524>
 8004332:	230c      	movs	r3, #12
 8004334:	e00a      	b.n	800434c <UART_SetConfig+0x524>
 8004336:	230a      	movs	r3, #10
 8004338:	e008      	b.n	800434c <UART_SetConfig+0x524>
 800433a:	2308      	movs	r3, #8
 800433c:	e006      	b.n	800434c <UART_SetConfig+0x524>
 800433e:	2306      	movs	r3, #6
 8004340:	e004      	b.n	800434c <UART_SetConfig+0x524>
 8004342:	2304      	movs	r3, #4
 8004344:	e002      	b.n	800434c <UART_SetConfig+0x524>
 8004346:	2302      	movs	r3, #2
 8004348:	e000      	b.n	800434c <UART_SetConfig+0x524>
 800434a:	2301      	movs	r3, #1
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004352:	e071      	b.n	8004438 <UART_SetConfig+0x610>
 8004354:	40008000 	.word	0x40008000
 8004358:	00f42400 	.word	0x00f42400
 800435c:	0001e848 	.word	0x0001e848
 8004360:	0003d090 	.word	0x0003d090
 8004364:	0007a120 	.word	0x0007a120
 8004368:	000f4240 	.word	0x000f4240
 800436c:	00145855 	.word	0x00145855
 8004370:	00186a00 	.word	0x00186a00
 8004374:	001e8480 	.word	0x001e8480
 8004378:	0028b0aa 	.word	0x0028b0aa
 800437c:	003d0900 	.word	0x003d0900
 8004380:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d04e      	beq.n	800442a <UART_SetConfig+0x602>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b01      	cmp	r3, #1
 8004392:	d047      	beq.n	8004424 <UART_SetConfig+0x5fc>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b02      	cmp	r3, #2
 800439a:	d040      	beq.n	800441e <UART_SetConfig+0x5f6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d039      	beq.n	8004418 <UART_SetConfig+0x5f0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d032      	beq.n	8004412 <UART_SetConfig+0x5ea>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d02b      	beq.n	800440c <UART_SetConfig+0x5e4>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d024      	beq.n	8004406 <UART_SetConfig+0x5de>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2b07      	cmp	r3, #7
 80043c2:	d01d      	beq.n	8004400 <UART_SetConfig+0x5d8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d016      	beq.n	80043fa <UART_SetConfig+0x5d2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b09      	cmp	r3, #9
 80043d2:	d00f      	beq.n	80043f4 <UART_SetConfig+0x5cc>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b0a      	cmp	r3, #10
 80043da:	d008      	beq.n	80043ee <UART_SetConfig+0x5c6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b0b      	cmp	r3, #11
 80043e2:	d101      	bne.n	80043e8 <UART_SetConfig+0x5c0>
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	e022      	b.n	800442e <UART_SetConfig+0x606>
 80043e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ec:	e01f      	b.n	800442e <UART_SetConfig+0x606>
 80043ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f2:	e01c      	b.n	800442e <UART_SetConfig+0x606>
 80043f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f8:	e019      	b.n	800442e <UART_SetConfig+0x606>
 80043fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fe:	e016      	b.n	800442e <UART_SetConfig+0x606>
 8004400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004404:	e013      	b.n	800442e <UART_SetConfig+0x606>
 8004406:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x606>
 800440c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x606>
 8004412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004416:	e00a      	b.n	800442e <UART_SetConfig+0x606>
 8004418:	f241 5355 	movw	r3, #5461	; 0x1555
 800441c:	e007      	b.n	800442e <UART_SetConfig+0x606>
 800441e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004422:	e004      	b.n	800442e <UART_SetConfig+0x606>
 8004424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004428:	e001      	b.n	800442e <UART_SetConfig+0x606>
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004430:	e002      	b.n	8004438 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	76fb      	strb	r3, [r7, #27]
        break;
 8004436:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 86b7 	beq.w	80051ae <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	d305      	bcc.n	800445c <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	d903      	bls.n	8004464 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	f000 bea5 	b.w	80051ae <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8004464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004468:	2b08      	cmp	r3, #8
 800446a:	f200 8277 	bhi.w	800495c <UART_SetConfig+0xb34>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x64c>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004499 	.word	0x08004499
 8004478:	0800495d 	.word	0x0800495d
 800447c:	080045d7 	.word	0x080045d7
 8004480:	0800495d 	.word	0x0800495d
 8004484:	080046cd 	.word	0x080046cd
 8004488:	0800495d 	.word	0x0800495d
 800448c:	0800495d 	.word	0x0800495d
 8004490:	0800495d 	.word	0x0800495d
 8004494:	0800480b 	.word	0x0800480b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe fe32 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 800449c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d067      	beq.n	800457e <UART_SetConfig+0x756>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d05e      	beq.n	8004574 <UART_SetConfig+0x74c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d055      	beq.n	800456a <UART_SetConfig+0x742>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d04c      	beq.n	8004560 <UART_SetConfig+0x738>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d043      	beq.n	8004556 <UART_SetConfig+0x72e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d03a      	beq.n	800454c <UART_SetConfig+0x724>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d031      	beq.n	8004542 <UART_SetConfig+0x71a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b07      	cmp	r3, #7
 80044e4:	d028      	beq.n	8004538 <UART_SetConfig+0x710>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d01f      	beq.n	800452e <UART_SetConfig+0x706>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d016      	beq.n	8004524 <UART_SetConfig+0x6fc>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b0a      	cmp	r3, #10
 80044fc:	d00d      	beq.n	800451a <UART_SetConfig+0x6f2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b0b      	cmp	r3, #11
 8004504:	d104      	bne.n	8004510 <UART_SetConfig+0x6e8>
 8004506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800450a:	f04f 0400 	mov.w	r4, #0
 800450e:	e03a      	b.n	8004586 <UART_SetConfig+0x75e>
 8004510:	f04f 0301 	mov.w	r3, #1
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	e035      	b.n	8004586 <UART_SetConfig+0x75e>
 800451a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	e030      	b.n	8004586 <UART_SetConfig+0x75e>
 8004524:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	e02b      	b.n	8004586 <UART_SetConfig+0x75e>
 800452e:	f04f 0320 	mov.w	r3, #32
 8004532:	f04f 0400 	mov.w	r4, #0
 8004536:	e026      	b.n	8004586 <UART_SetConfig+0x75e>
 8004538:	f04f 0310 	mov.w	r3, #16
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	e021      	b.n	8004586 <UART_SetConfig+0x75e>
 8004542:	f04f 030c 	mov.w	r3, #12
 8004546:	f04f 0400 	mov.w	r4, #0
 800454a:	e01c      	b.n	8004586 <UART_SetConfig+0x75e>
 800454c:	f04f 030a 	mov.w	r3, #10
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	e017      	b.n	8004586 <UART_SetConfig+0x75e>
 8004556:	f04f 0308 	mov.w	r3, #8
 800455a:	f04f 0400 	mov.w	r4, #0
 800455e:	e012      	b.n	8004586 <UART_SetConfig+0x75e>
 8004560:	f04f 0306 	mov.w	r3, #6
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	e00d      	b.n	8004586 <UART_SetConfig+0x75e>
 800456a:	f04f 0304 	mov.w	r3, #4
 800456e:	f04f 0400 	mov.w	r4, #0
 8004572:	e008      	b.n	8004586 <UART_SetConfig+0x75e>
 8004574:	f04f 0302 	mov.w	r3, #2
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	e003      	b.n	8004586 <UART_SetConfig+0x75e>
 800457e:	f04f 0301 	mov.w	r3, #1
 8004582:	f04f 0400 	mov.w	r4, #0
 8004586:	461a      	mov	r2, r3
 8004588:	4623      	mov	r3, r4
 800458a:	f7fb fe39 	bl	8000200 <__aeabi_uldivmod>
 800458e:	4603      	mov	r3, r0
 8004590:	460c      	mov	r4, r1
 8004592:	4619      	mov	r1, r3
 8004594:	4622      	mov	r2, r4
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	0214      	lsls	r4, r2, #8
 80045a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045a4:	020b      	lsls	r3, r1, #8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6852      	ldr	r2, [r2, #4]
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	4611      	mov	r1, r2
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	eb13 0b01 	adds.w	fp, r3, r1
 80045b6:	eb44 0c02 	adc.w	ip, r4, r2
 80045ba:	4658      	mov	r0, fp
 80045bc:	4661      	mov	r1, ip
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4623      	mov	r3, r4
 80045ca:	f7fb fe19 	bl	8000200 <__aeabi_uldivmod>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80045d4:	e1c5      	b.n	8004962 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d05b      	beq.n	8004696 <UART_SetConfig+0x86e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d053      	beq.n	800468e <UART_SetConfig+0x866>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d04b      	beq.n	8004686 <UART_SetConfig+0x85e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d043      	beq.n	800467e <UART_SetConfig+0x856>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d03b      	beq.n	8004676 <UART_SetConfig+0x84e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b05      	cmp	r3, #5
 8004604:	d033      	beq.n	800466e <UART_SetConfig+0x846>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b06      	cmp	r3, #6
 800460c:	d02b      	beq.n	8004666 <UART_SetConfig+0x83e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b07      	cmp	r3, #7
 8004614:	d023      	beq.n	800465e <UART_SetConfig+0x836>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b08      	cmp	r3, #8
 800461c:	d01b      	beq.n	8004656 <UART_SetConfig+0x82e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b09      	cmp	r3, #9
 8004624:	d013      	beq.n	800464e <UART_SetConfig+0x826>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b0a      	cmp	r3, #10
 800462c:	d00b      	beq.n	8004646 <UART_SetConfig+0x81e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b0b      	cmp	r3, #11
 8004634:	d103      	bne.n	800463e <UART_SetConfig+0x816>
 8004636:	4bae      	ldr	r3, [pc, #696]	; (80048f0 <UART_SetConfig+0xac8>)
 8004638:	f04f 0400 	mov.w	r4, #0
 800463c:	e02e      	b.n	800469c <UART_SetConfig+0x874>
 800463e:	4bad      	ldr	r3, [pc, #692]	; (80048f4 <UART_SetConfig+0xacc>)
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	e02a      	b.n	800469c <UART_SetConfig+0x874>
 8004646:	4bac      	ldr	r3, [pc, #688]	; (80048f8 <UART_SetConfig+0xad0>)
 8004648:	f04f 0400 	mov.w	r4, #0
 800464c:	e026      	b.n	800469c <UART_SetConfig+0x874>
 800464e:	4bab      	ldr	r3, [pc, #684]	; (80048fc <UART_SetConfig+0xad4>)
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	e022      	b.n	800469c <UART_SetConfig+0x874>
 8004656:	4baa      	ldr	r3, [pc, #680]	; (8004900 <UART_SetConfig+0xad8>)
 8004658:	f04f 0400 	mov.w	r4, #0
 800465c:	e01e      	b.n	800469c <UART_SetConfig+0x874>
 800465e:	4ba9      	ldr	r3, [pc, #676]	; (8004904 <UART_SetConfig+0xadc>)
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	e01a      	b.n	800469c <UART_SetConfig+0x874>
 8004666:	a49e      	add	r4, pc, #632	; (adr r4, 80048e0 <UART_SetConfig+0xab8>)
 8004668:	e9d4 3400 	ldrd	r3, r4, [r4]
 800466c:	e016      	b.n	800469c <UART_SetConfig+0x874>
 800466e:	4ba6      	ldr	r3, [pc, #664]	; (8004908 <UART_SetConfig+0xae0>)
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	e012      	b.n	800469c <UART_SetConfig+0x874>
 8004676:	4ba5      	ldr	r3, [pc, #660]	; (800490c <UART_SetConfig+0xae4>)
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	e00e      	b.n	800469c <UART_SetConfig+0x874>
 800467e:	a49a      	add	r4, pc, #616	; (adr r4, 80048e8 <UART_SetConfig+0xac0>)
 8004680:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004684:	e00a      	b.n	800469c <UART_SetConfig+0x874>
 8004686:	4ba2      	ldr	r3, [pc, #648]	; (8004910 <UART_SetConfig+0xae8>)
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e006      	b.n	800469c <UART_SetConfig+0x874>
 800468e:	4ba1      	ldr	r3, [pc, #644]	; (8004914 <UART_SetConfig+0xaec>)
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	e002      	b.n	800469c <UART_SetConfig+0x874>
 8004696:	4b97      	ldr	r3, [pc, #604]	; (80048f4 <UART_SetConfig+0xacc>)
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6852      	ldr	r2, [r2, #4]
 80046a0:	0852      	lsrs	r2, r2, #1
 80046a2:	4611      	mov	r1, r2
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	eb13 0b01 	adds.w	fp, r3, r1
 80046ac:	eb44 0c02 	adc.w	ip, r4, r2
 80046b0:	4658      	mov	r0, fp
 80046b2:	4661      	mov	r1, ip
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	461a      	mov	r2, r3
 80046be:	4623      	mov	r3, r4
 80046c0:	f7fb fd9e 	bl	8000200 <__aeabi_uldivmod>
 80046c4:	4603      	mov	r3, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80046ca:	e14a      	b.n	8004962 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80046cc:	f7fe fc82 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 80046d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d067      	beq.n	80047b2 <UART_SetConfig+0x98a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d05e      	beq.n	80047a8 <UART_SetConfig+0x980>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d055      	beq.n	800479e <UART_SetConfig+0x976>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d04c      	beq.n	8004794 <UART_SetConfig+0x96c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d043      	beq.n	800478a <UART_SetConfig+0x962>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b05      	cmp	r3, #5
 8004708:	d03a      	beq.n	8004780 <UART_SetConfig+0x958>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b06      	cmp	r3, #6
 8004710:	d031      	beq.n	8004776 <UART_SetConfig+0x94e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b07      	cmp	r3, #7
 8004718:	d028      	beq.n	800476c <UART_SetConfig+0x944>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b08      	cmp	r3, #8
 8004720:	d01f      	beq.n	8004762 <UART_SetConfig+0x93a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b09      	cmp	r3, #9
 8004728:	d016      	beq.n	8004758 <UART_SetConfig+0x930>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b0a      	cmp	r3, #10
 8004730:	d00d      	beq.n	800474e <UART_SetConfig+0x926>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b0b      	cmp	r3, #11
 8004738:	d104      	bne.n	8004744 <UART_SetConfig+0x91c>
 800473a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800473e:	f04f 0400 	mov.w	r4, #0
 8004742:	e03a      	b.n	80047ba <UART_SetConfig+0x992>
 8004744:	f04f 0301 	mov.w	r3, #1
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	e035      	b.n	80047ba <UART_SetConfig+0x992>
 800474e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004752:	f04f 0400 	mov.w	r4, #0
 8004756:	e030      	b.n	80047ba <UART_SetConfig+0x992>
 8004758:	f04f 0340 	mov.w	r3, #64	; 0x40
 800475c:	f04f 0400 	mov.w	r4, #0
 8004760:	e02b      	b.n	80047ba <UART_SetConfig+0x992>
 8004762:	f04f 0320 	mov.w	r3, #32
 8004766:	f04f 0400 	mov.w	r4, #0
 800476a:	e026      	b.n	80047ba <UART_SetConfig+0x992>
 800476c:	f04f 0310 	mov.w	r3, #16
 8004770:	f04f 0400 	mov.w	r4, #0
 8004774:	e021      	b.n	80047ba <UART_SetConfig+0x992>
 8004776:	f04f 030c 	mov.w	r3, #12
 800477a:	f04f 0400 	mov.w	r4, #0
 800477e:	e01c      	b.n	80047ba <UART_SetConfig+0x992>
 8004780:	f04f 030a 	mov.w	r3, #10
 8004784:	f04f 0400 	mov.w	r4, #0
 8004788:	e017      	b.n	80047ba <UART_SetConfig+0x992>
 800478a:	f04f 0308 	mov.w	r3, #8
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	e012      	b.n	80047ba <UART_SetConfig+0x992>
 8004794:	f04f 0306 	mov.w	r3, #6
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	e00d      	b.n	80047ba <UART_SetConfig+0x992>
 800479e:	f04f 0304 	mov.w	r3, #4
 80047a2:	f04f 0400 	mov.w	r4, #0
 80047a6:	e008      	b.n	80047ba <UART_SetConfig+0x992>
 80047a8:	f04f 0302 	mov.w	r3, #2
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	e003      	b.n	80047ba <UART_SetConfig+0x992>
 80047b2:	f04f 0301 	mov.w	r3, #1
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	461a      	mov	r2, r3
 80047bc:	4623      	mov	r3, r4
 80047be:	f7fb fd1f 	bl	8000200 <__aeabi_uldivmod>
 80047c2:	4603      	mov	r3, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	4619      	mov	r1, r3
 80047c8:	4622      	mov	r2, r4
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	0214      	lsls	r4, r2, #8
 80047d4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047d8:	020b      	lsls	r3, r1, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6852      	ldr	r2, [r2, #4]
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	4611      	mov	r1, r2
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	eb13 0b01 	adds.w	fp, r3, r1
 80047ea:	eb44 0c02 	adc.w	ip, r4, r2
 80047ee:	4658      	mov	r0, fp
 80047f0:	4661      	mov	r1, ip
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7fb fcff 	bl	8000200 <__aeabi_uldivmod>
 8004802:	4603      	mov	r3, r0
 8004804:	460c      	mov	r4, r1
 8004806:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004808:	e0ab      	b.n	8004962 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8088 	beq.w	8004924 <UART_SetConfig+0xafc>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b01      	cmp	r3, #1
 800481a:	d05b      	beq.n	80048d4 <UART_SetConfig+0xaac>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b02      	cmp	r3, #2
 8004822:	d052      	beq.n	80048ca <UART_SetConfig+0xaa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b03      	cmp	r3, #3
 800482a:	d04a      	beq.n	80048c2 <UART_SetConfig+0xa9a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b04      	cmp	r3, #4
 8004832:	d041      	beq.n	80048b8 <UART_SetConfig+0xa90>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b05      	cmp	r3, #5
 800483a:	d039      	beq.n	80048b0 <UART_SetConfig+0xa88>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b06      	cmp	r3, #6
 8004842:	d031      	beq.n	80048a8 <UART_SetConfig+0xa80>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b07      	cmp	r3, #7
 800484a:	d028      	beq.n	800489e <UART_SetConfig+0xa76>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b08      	cmp	r3, #8
 8004852:	d01f      	beq.n	8004894 <UART_SetConfig+0xa6c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b09      	cmp	r3, #9
 800485a:	d016      	beq.n	800488a <UART_SetConfig+0xa62>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b0a      	cmp	r3, #10
 8004862:	d00d      	beq.n	8004880 <UART_SetConfig+0xa58>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b0b      	cmp	r3, #11
 800486a:	d104      	bne.n	8004876 <UART_SetConfig+0xa4e>
 800486c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004870:	f04f 0400 	mov.w	r4, #0
 8004874:	e05a      	b.n	800492c <UART_SetConfig+0xb04>
 8004876:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800487a:	f04f 0400 	mov.w	r4, #0
 800487e:	e055      	b.n	800492c <UART_SetConfig+0xb04>
 8004880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	e050      	b.n	800492c <UART_SetConfig+0xb04>
 800488a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	e04b      	b.n	800492c <UART_SetConfig+0xb04>
 8004894:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004898:	f04f 0400 	mov.w	r4, #0
 800489c:	e046      	b.n	800492c <UART_SetConfig+0xb04>
 800489e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	e041      	b.n	800492c <UART_SetConfig+0xb04>
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <UART_SetConfig+0xaf0>)
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	e03d      	b.n	800492c <UART_SetConfig+0xb04>
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <UART_SetConfig+0xaf4>)
 80048b2:	f04f 0400 	mov.w	r4, #0
 80048b6:	e039      	b.n	800492c <UART_SetConfig+0xb04>
 80048b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048bc:	f04f 0400 	mov.w	r4, #0
 80048c0:	e034      	b.n	800492c <UART_SetConfig+0xb04>
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <UART_SetConfig+0xaf8>)
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	e030      	b.n	800492c <UART_SetConfig+0xb04>
 80048ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048ce:	f04f 0400 	mov.w	r4, #0
 80048d2:	e02b      	b.n	800492c <UART_SetConfig+0xb04>
 80048d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	e026      	b.n	800492c <UART_SetConfig+0xb04>
 80048de:	bf00      	nop
 80048e0:	14585500 	.word	0x14585500
 80048e4:	00000000 	.word	0x00000000
 80048e8:	28b0aa00 	.word	0x28b0aa00
 80048ec:	00000000 	.word	0x00000000
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	f4240000 	.word	0xf4240000
 80048f8:	01e84800 	.word	0x01e84800
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	07a12000 	.word	0x07a12000
 8004904:	0f424000 	.word	0x0f424000
 8004908:	186a0000 	.word	0x186a0000
 800490c:	1e848000 	.word	0x1e848000
 8004910:	3d090000 	.word	0x3d090000
 8004914:	7a120000 	.word	0x7a120000
 8004918:	000aaa00 	.word	0x000aaa00
 800491c:	000ccc00 	.word	0x000ccc00
 8004920:	00155500 	.word	0x00155500
 8004924:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6852      	ldr	r2, [r2, #4]
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	4611      	mov	r1, r2
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	eb13 0b01 	adds.w	fp, r3, r1
 800493c:	eb44 0c02 	adc.w	ip, r4, r2
 8004940:	4658      	mov	r0, fp
 8004942:	4661      	mov	r1, ip
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f04f 0400 	mov.w	r4, #0
 800494c:	461a      	mov	r2, r3
 800494e:	4623      	mov	r3, r4
 8004950:	f7fb fc56 	bl	8000200 <__aeabi_uldivmod>
 8004954:	4603      	mov	r3, r0
 8004956:	460c      	mov	r4, r1
 8004958:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800495a:	e002      	b.n	8004962 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	76fb      	strb	r3, [r7, #27]
            break;
 8004960:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004968:	d309      	bcc.n	800497e <UART_SetConfig+0xb56>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004970:	d205      	bcs.n	800497e <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	f000 bc18 	b.w	80051ae <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	76fb      	strb	r3, [r7, #27]
 8004982:	f000 bc14 	b.w	80051ae <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	f040 8204 	bne.w	8004d9a <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8004992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004996:	2b08      	cmp	r3, #8
 8004998:	f200 81df 	bhi.w	8004d5a <UART_SetConfig+0xf32>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0xb7c>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	08004a81 	.word	0x08004a81
 80049ac:	08004b39 	.word	0x08004b39
 80049b0:	08004d5b 	.word	0x08004d5b
 80049b4:	08004be1 	.word	0x08004be1
 80049b8:	08004d5b 	.word	0x08004d5b
 80049bc:	08004d5b 	.word	0x08004d5b
 80049c0:	08004d5b 	.word	0x08004d5b
 80049c4:	08004c99 	.word	0x08004c99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fb9a 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80049cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d044      	beq.n	8004a60 <UART_SetConfig+0xc38>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d03e      	beq.n	8004a5c <UART_SetConfig+0xc34>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d038      	beq.n	8004a58 <UART_SetConfig+0xc30>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d032      	beq.n	8004a54 <UART_SetConfig+0xc2c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d02c      	beq.n	8004a50 <UART_SetConfig+0xc28>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d026      	beq.n	8004a4c <UART_SetConfig+0xc24>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d020      	beq.n	8004a48 <UART_SetConfig+0xc20>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d01a      	beq.n	8004a44 <UART_SetConfig+0xc1c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d014      	beq.n	8004a40 <UART_SetConfig+0xc18>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	d00e      	beq.n	8004a3c <UART_SetConfig+0xc14>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b0a      	cmp	r3, #10
 8004a24:	d008      	beq.n	8004a38 <UART_SetConfig+0xc10>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b0b      	cmp	r3, #11
 8004a2c:	d102      	bne.n	8004a34 <UART_SetConfig+0xc0c>
 8004a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a32:	e016      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e014      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	e012      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	e010      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a40:	2320      	movs	r3, #32
 8004a42:	e00e      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a44:	2310      	movs	r3, #16
 8004a46:	e00c      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	e00a      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a4c:	230a      	movs	r3, #10
 8004a4e:	e008      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a50:	2308      	movs	r3, #8
 8004a52:	e006      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e004      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e002      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e000      	b.n	8004a62 <UART_SetConfig+0xc3a>
 8004a60:	2301      	movs	r3, #1
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a7e:	e16f      	b.n	8004d60 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe fb54 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8004a84:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d044      	beq.n	8004b18 <UART_SetConfig+0xcf0>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d03e      	beq.n	8004b14 <UART_SetConfig+0xcec>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d038      	beq.n	8004b10 <UART_SetConfig+0xce8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d032      	beq.n	8004b0c <UART_SetConfig+0xce4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d02c      	beq.n	8004b08 <UART_SetConfig+0xce0>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d026      	beq.n	8004b04 <UART_SetConfig+0xcdc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d020      	beq.n	8004b00 <UART_SetConfig+0xcd8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b07      	cmp	r3, #7
 8004ac4:	d01a      	beq.n	8004afc <UART_SetConfig+0xcd4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d014      	beq.n	8004af8 <UART_SetConfig+0xcd0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b09      	cmp	r3, #9
 8004ad4:	d00e      	beq.n	8004af4 <UART_SetConfig+0xccc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b0a      	cmp	r3, #10
 8004adc:	d008      	beq.n	8004af0 <UART_SetConfig+0xcc8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b0b      	cmp	r3, #11
 8004ae4:	d102      	bne.n	8004aec <UART_SetConfig+0xcc4>
 8004ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aea:	e016      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e014      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	e012      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	e010      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004af8:	2320      	movs	r3, #32
 8004afa:	e00e      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004afc:	2310      	movs	r3, #16
 8004afe:	e00c      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b00:	230c      	movs	r3, #12
 8004b02:	e00a      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b04:	230a      	movs	r3, #10
 8004b06:	e008      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	e006      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e004      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e002      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e000      	b.n	8004b1a <UART_SetConfig+0xcf2>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	441a      	add	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b36:	e113      	b.n	8004d60 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d043      	beq.n	8004bc8 <UART_SetConfig+0xda0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d03d      	beq.n	8004bc4 <UART_SetConfig+0xd9c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d037      	beq.n	8004bc0 <UART_SetConfig+0xd98>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d031      	beq.n	8004bbc <UART_SetConfig+0xd94>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d02b      	beq.n	8004bb8 <UART_SetConfig+0xd90>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d025      	beq.n	8004bb4 <UART_SetConfig+0xd8c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d01f      	beq.n	8004bb0 <UART_SetConfig+0xd88>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b07      	cmp	r3, #7
 8004b76:	d019      	beq.n	8004bac <UART_SetConfig+0xd84>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d013      	beq.n	8004ba8 <UART_SetConfig+0xd80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b09      	cmp	r3, #9
 8004b86:	d00d      	beq.n	8004ba4 <UART_SetConfig+0xd7c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b0a      	cmp	r3, #10
 8004b8e:	d007      	beq.n	8004ba0 <UART_SetConfig+0xd78>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b0b      	cmp	r3, #11
 8004b96:	d101      	bne.n	8004b9c <UART_SetConfig+0xd74>
 8004b98:	4b8d      	ldr	r3, [pc, #564]	; (8004dd0 <UART_SetConfig+0xfa8>)
 8004b9a:	e016      	b.n	8004bca <UART_SetConfig+0xda2>
 8004b9c:	4b8d      	ldr	r3, [pc, #564]	; (8004dd4 <UART_SetConfig+0xfac>)
 8004b9e:	e014      	b.n	8004bca <UART_SetConfig+0xda2>
 8004ba0:	4b8d      	ldr	r3, [pc, #564]	; (8004dd8 <UART_SetConfig+0xfb0>)
 8004ba2:	e012      	b.n	8004bca <UART_SetConfig+0xda2>
 8004ba4:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <UART_SetConfig+0xfb4>)
 8004ba6:	e010      	b.n	8004bca <UART_SetConfig+0xda2>
 8004ba8:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <UART_SetConfig+0xfb8>)
 8004baa:	e00e      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bac:	4b8d      	ldr	r3, [pc, #564]	; (8004de4 <UART_SetConfig+0xfbc>)
 8004bae:	e00c      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bb0:	4b8d      	ldr	r3, [pc, #564]	; (8004de8 <UART_SetConfig+0xfc0>)
 8004bb2:	e00a      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bb4:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <UART_SetConfig+0xfc4>)
 8004bb6:	e008      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bb8:	4b8d      	ldr	r3, [pc, #564]	; (8004df0 <UART_SetConfig+0xfc8>)
 8004bba:	e006      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	; (8004df4 <UART_SetConfig+0xfcc>)
 8004bbe:	e004      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bc0:	4b8d      	ldr	r3, [pc, #564]	; (8004df8 <UART_SetConfig+0xfd0>)
 8004bc2:	e002      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bc4:	4b8d      	ldr	r3, [pc, #564]	; (8004dfc <UART_SetConfig+0xfd4>)
 8004bc6:	e000      	b.n	8004bca <UART_SetConfig+0xda2>
 8004bc8:	4b82      	ldr	r3, [pc, #520]	; (8004dd4 <UART_SetConfig+0xfac>)
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6852      	ldr	r2, [r2, #4]
 8004bce:	0852      	lsrs	r2, r2, #1
 8004bd0:	441a      	add	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bde:	e0bf      	b.n	8004d60 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be0:	f7fe f9f8 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8004be4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d044      	beq.n	8004c78 <UART_SetConfig+0xe50>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d03e      	beq.n	8004c74 <UART_SetConfig+0xe4c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d038      	beq.n	8004c70 <UART_SetConfig+0xe48>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d032      	beq.n	8004c6c <UART_SetConfig+0xe44>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d02c      	beq.n	8004c68 <UART_SetConfig+0xe40>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d026      	beq.n	8004c64 <UART_SetConfig+0xe3c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d020      	beq.n	8004c60 <UART_SetConfig+0xe38>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	d01a      	beq.n	8004c5c <UART_SetConfig+0xe34>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d014      	beq.n	8004c58 <UART_SetConfig+0xe30>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d00e      	beq.n	8004c54 <UART_SetConfig+0xe2c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b0a      	cmp	r3, #10
 8004c3c:	d008      	beq.n	8004c50 <UART_SetConfig+0xe28>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b0b      	cmp	r3, #11
 8004c44:	d102      	bne.n	8004c4c <UART_SetConfig+0xe24>
 8004c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4a:	e016      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e014      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	e012      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c54:	2340      	movs	r3, #64	; 0x40
 8004c56:	e010      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e00e      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	e00c      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c60:	230c      	movs	r3, #12
 8004c62:	e00a      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c64:	230a      	movs	r3, #10
 8004c66:	e008      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	e006      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	e004      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c70:	2304      	movs	r3, #4
 8004c72:	e002      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e000      	b.n	8004c7a <UART_SetConfig+0xe52>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	005a      	lsls	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c96:	e063      	b.n	8004d60 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d04f      	beq.n	8004d40 <UART_SetConfig+0xf18>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d048      	beq.n	8004d3a <UART_SetConfig+0xf12>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d041      	beq.n	8004d34 <UART_SetConfig+0xf0c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d03a      	beq.n	8004d2e <UART_SetConfig+0xf06>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d033      	beq.n	8004d28 <UART_SetConfig+0xf00>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d02c      	beq.n	8004d22 <UART_SetConfig+0xefa>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d025      	beq.n	8004d1c <UART_SetConfig+0xef4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d01e      	beq.n	8004d16 <UART_SetConfig+0xeee>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d017      	beq.n	8004d10 <UART_SetConfig+0xee8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d010      	beq.n	8004d0a <UART_SetConfig+0xee2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b0a      	cmp	r3, #10
 8004cee:	d009      	beq.n	8004d04 <UART_SetConfig+0xedc>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b0b      	cmp	r3, #11
 8004cf6:	d102      	bne.n	8004cfe <UART_SetConfig+0xed6>
 8004cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cfc:	e022      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d02:	e01f      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d08:	e01c      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d0e:	e019      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d14:	e016      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1a:	e013      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d1c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004d20:	e010      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d22:	f641 1398 	movw	r3, #6552	; 0x1998
 8004d26:	e00d      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d2c:	e00a      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d2e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004d32:	e007      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	e001      	b.n	8004d44 <UART_SetConfig+0xf1c>
 8004d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	0852      	lsrs	r2, r2, #1
 8004d4a:	441a      	add	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d58:	e002      	b.n	8004d60 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	76fb      	strb	r3, [r7, #27]
        break;
 8004d5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d916      	bls.n	8004d94 <UART_SetConfig+0xf6c>
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d212      	bcs.n	8004d94 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f023 030f 	bic.w	r3, r3, #15
 8004d76:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	89fa      	ldrh	r2, [r7, #14]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	e20c      	b.n	80051ae <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	76fb      	strb	r3, [r7, #27]
 8004d98:	e209      	b.n	80051ae <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	f200 81f4 	bhi.w	800518c <UART_SetConfig+0x1364>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0xf84>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004eb7 	.word	0x08004eb7
 8004db4:	08004f6d 	.word	0x08004f6d
 8004db8:	0800518d 	.word	0x0800518d
 8004dbc:	08005017 	.word	0x08005017
 8004dc0:	0800518d 	.word	0x0800518d
 8004dc4:	0800518d 	.word	0x0800518d
 8004dc8:	0800518d 	.word	0x0800518d
 8004dcc:	080050cd 	.word	0x080050cd
 8004dd0:	0001e848 	.word	0x0001e848
 8004dd4:	01e84800 	.word	0x01e84800
 8004dd8:	0003d090 	.word	0x0003d090
 8004ddc:	0007a120 	.word	0x0007a120
 8004de0:	000f4240 	.word	0x000f4240
 8004de4:	001e8480 	.word	0x001e8480
 8004de8:	0028b0aa 	.word	0x0028b0aa
 8004dec:	0030d400 	.word	0x0030d400
 8004df0:	003d0900 	.word	0x003d0900
 8004df4:	00516154 	.word	0x00516154
 8004df8:	007a1200 	.word	0x007a1200
 8004dfc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fe f97e 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8004e04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d044      	beq.n	8004e98 <UART_SetConfig+0x1070>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d03e      	beq.n	8004e94 <UART_SetConfig+0x106c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d038      	beq.n	8004e90 <UART_SetConfig+0x1068>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d032      	beq.n	8004e8c <UART_SetConfig+0x1064>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d02c      	beq.n	8004e88 <UART_SetConfig+0x1060>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d026      	beq.n	8004e84 <UART_SetConfig+0x105c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d020      	beq.n	8004e80 <UART_SetConfig+0x1058>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b07      	cmp	r3, #7
 8004e44:	d01a      	beq.n	8004e7c <UART_SetConfig+0x1054>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d014      	beq.n	8004e78 <UART_SetConfig+0x1050>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d00e      	beq.n	8004e74 <UART_SetConfig+0x104c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	d008      	beq.n	8004e70 <UART_SetConfig+0x1048>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b0b      	cmp	r3, #11
 8004e64:	d102      	bne.n	8004e6c <UART_SetConfig+0x1044>
 8004e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6a:	e016      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e014      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	e012      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e74:	2340      	movs	r3, #64	; 0x40
 8004e76:	e010      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e00e      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	e00c      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e80:	230c      	movs	r3, #12
 8004e82:	e00a      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e84:	230a      	movs	r3, #10
 8004e86:	e008      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	e006      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e8c:	2306      	movs	r3, #6
 8004e8e:	e004      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e90:	2304      	movs	r3, #4
 8004e92:	e002      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e000      	b.n	8004e9a <UART_SetConfig+0x1072>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eb4:	e16d      	b.n	8005192 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb6:	f7fe f939 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8004eba:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d044      	beq.n	8004f4e <UART_SetConfig+0x1126>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d03e      	beq.n	8004f4a <UART_SetConfig+0x1122>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d038      	beq.n	8004f46 <UART_SetConfig+0x111e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d032      	beq.n	8004f42 <UART_SetConfig+0x111a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d02c      	beq.n	8004f3e <UART_SetConfig+0x1116>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d026      	beq.n	8004f3a <UART_SetConfig+0x1112>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d020      	beq.n	8004f36 <UART_SetConfig+0x110e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	d01a      	beq.n	8004f32 <UART_SetConfig+0x110a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d014      	beq.n	8004f2e <UART_SetConfig+0x1106>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d00e      	beq.n	8004f2a <UART_SetConfig+0x1102>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b0a      	cmp	r3, #10
 8004f12:	d008      	beq.n	8004f26 <UART_SetConfig+0x10fe>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b0b      	cmp	r3, #11
 8004f1a:	d102      	bne.n	8004f22 <UART_SetConfig+0x10fa>
 8004f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f20:	e016      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e014      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	e012      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	e010      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e00e      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f32:	2310      	movs	r3, #16
 8004f34:	e00c      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f36:	230c      	movs	r3, #12
 8004f38:	e00a      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e008      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e006      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f42:	2306      	movs	r3, #6
 8004f44:	e004      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f46:	2304      	movs	r3, #4
 8004f48:	e002      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e000      	b.n	8004f50 <UART_SetConfig+0x1128>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f6a:	e112      	b.n	8005192 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d044      	beq.n	8004ffe <UART_SetConfig+0x11d6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d03e      	beq.n	8004ffa <UART_SetConfig+0x11d2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d038      	beq.n	8004ff6 <UART_SetConfig+0x11ce>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d032      	beq.n	8004ff2 <UART_SetConfig+0x11ca>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d02c      	beq.n	8004fee <UART_SetConfig+0x11c6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d026      	beq.n	8004fea <UART_SetConfig+0x11c2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d020      	beq.n	8004fe6 <UART_SetConfig+0x11be>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b07      	cmp	r3, #7
 8004faa:	d01a      	beq.n	8004fe2 <UART_SetConfig+0x11ba>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d014      	beq.n	8004fde <UART_SetConfig+0x11b6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b09      	cmp	r3, #9
 8004fba:	d00e      	beq.n	8004fda <UART_SetConfig+0x11b2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b0a      	cmp	r3, #10
 8004fc2:	d008      	beq.n	8004fd6 <UART_SetConfig+0x11ae>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b0b      	cmp	r3, #11
 8004fca:	d102      	bne.n	8004fd2 <UART_SetConfig+0x11aa>
 8004fcc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fd0:	e016      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fd2:	4b81      	ldr	r3, [pc, #516]	; (80051d8 <UART_SetConfig+0x13b0>)
 8004fd4:	e014      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fd6:	4b81      	ldr	r3, [pc, #516]	; (80051dc <UART_SetConfig+0x13b4>)
 8004fd8:	e012      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fda:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <UART_SetConfig+0x13b8>)
 8004fdc:	e010      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fde:	4b81      	ldr	r3, [pc, #516]	; (80051e4 <UART_SetConfig+0x13bc>)
 8004fe0:	e00e      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fe2:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <UART_SetConfig+0x13c0>)
 8004fe4:	e00c      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fe6:	4b81      	ldr	r3, [pc, #516]	; (80051ec <UART_SetConfig+0x13c4>)
 8004fe8:	e00a      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fea:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <UART_SetConfig+0x13c8>)
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004fee:	4b81      	ldr	r3, [pc, #516]	; (80051f4 <UART_SetConfig+0x13cc>)
 8004ff0:	e006      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004ff2:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <UART_SetConfig+0x13d0>)
 8004ff4:	e004      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004ff6:	4b81      	ldr	r3, [pc, #516]	; (80051fc <UART_SetConfig+0x13d4>)
 8004ff8:	e002      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004ffa:	4b81      	ldr	r3, [pc, #516]	; (8005200 <UART_SetConfig+0x13d8>)
 8004ffc:	e000      	b.n	8005000 <UART_SetConfig+0x11d8>
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <UART_SetConfig+0x13b0>)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6852      	ldr	r2, [r2, #4]
 8005004:	0852      	lsrs	r2, r2, #1
 8005006:	441a      	add	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	b29b      	uxth	r3, r3
 8005012:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005014:	e0bd      	b.n	8005192 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005016:	f7fd ffdd 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 800501a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d044      	beq.n	80050ae <UART_SetConfig+0x1286>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b01      	cmp	r3, #1
 800502a:	d03e      	beq.n	80050aa <UART_SetConfig+0x1282>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b02      	cmp	r3, #2
 8005032:	d038      	beq.n	80050a6 <UART_SetConfig+0x127e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b03      	cmp	r3, #3
 800503a:	d032      	beq.n	80050a2 <UART_SetConfig+0x127a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b04      	cmp	r3, #4
 8005042:	d02c      	beq.n	800509e <UART_SetConfig+0x1276>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b05      	cmp	r3, #5
 800504a:	d026      	beq.n	800509a <UART_SetConfig+0x1272>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b06      	cmp	r3, #6
 8005052:	d020      	beq.n	8005096 <UART_SetConfig+0x126e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b07      	cmp	r3, #7
 800505a:	d01a      	beq.n	8005092 <UART_SetConfig+0x126a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b08      	cmp	r3, #8
 8005062:	d014      	beq.n	800508e <UART_SetConfig+0x1266>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b09      	cmp	r3, #9
 800506a:	d00e      	beq.n	800508a <UART_SetConfig+0x1262>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b0a      	cmp	r3, #10
 8005072:	d008      	beq.n	8005086 <UART_SetConfig+0x125e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b0b      	cmp	r3, #11
 800507a:	d102      	bne.n	8005082 <UART_SetConfig+0x125a>
 800507c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005080:	e016      	b.n	80050b0 <UART_SetConfig+0x1288>
 8005082:	2301      	movs	r3, #1
 8005084:	e014      	b.n	80050b0 <UART_SetConfig+0x1288>
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	e012      	b.n	80050b0 <UART_SetConfig+0x1288>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	e010      	b.n	80050b0 <UART_SetConfig+0x1288>
 800508e:	2320      	movs	r3, #32
 8005090:	e00e      	b.n	80050b0 <UART_SetConfig+0x1288>
 8005092:	2310      	movs	r3, #16
 8005094:	e00c      	b.n	80050b0 <UART_SetConfig+0x1288>
 8005096:	230c      	movs	r3, #12
 8005098:	e00a      	b.n	80050b0 <UART_SetConfig+0x1288>
 800509a:	230a      	movs	r3, #10
 800509c:	e008      	b.n	80050b0 <UART_SetConfig+0x1288>
 800509e:	2308      	movs	r3, #8
 80050a0:	e006      	b.n	80050b0 <UART_SetConfig+0x1288>
 80050a2:	2306      	movs	r3, #6
 80050a4:	e004      	b.n	80050b0 <UART_SetConfig+0x1288>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e002      	b.n	80050b0 <UART_SetConfig+0x1288>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e000      	b.n	80050b0 <UART_SetConfig+0x1288>
 80050ae:	2301      	movs	r3, #1
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80050ca:	e062      	b.n	8005192 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d04e      	beq.n	8005172 <UART_SetConfig+0x134a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d047      	beq.n	800516c <UART_SetConfig+0x1344>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d040      	beq.n	8005166 <UART_SetConfig+0x133e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d039      	beq.n	8005160 <UART_SetConfig+0x1338>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d032      	beq.n	800515a <UART_SetConfig+0x1332>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d02b      	beq.n	8005154 <UART_SetConfig+0x132c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b06      	cmp	r3, #6
 8005102:	d024      	beq.n	800514e <UART_SetConfig+0x1326>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b07      	cmp	r3, #7
 800510a:	d01d      	beq.n	8005148 <UART_SetConfig+0x1320>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b08      	cmp	r3, #8
 8005112:	d016      	beq.n	8005142 <UART_SetConfig+0x131a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b09      	cmp	r3, #9
 800511a:	d00f      	beq.n	800513c <UART_SetConfig+0x1314>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b0a      	cmp	r3, #10
 8005122:	d008      	beq.n	8005136 <UART_SetConfig+0x130e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b0b      	cmp	r3, #11
 800512a:	d101      	bne.n	8005130 <UART_SetConfig+0x1308>
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	e022      	b.n	8005176 <UART_SetConfig+0x134e>
 8005130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005134:	e01f      	b.n	8005176 <UART_SetConfig+0x134e>
 8005136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513a:	e01c      	b.n	8005176 <UART_SetConfig+0x134e>
 800513c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005140:	e019      	b.n	8005176 <UART_SetConfig+0x134e>
 8005142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005146:	e016      	b.n	8005176 <UART_SetConfig+0x134e>
 8005148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800514c:	e013      	b.n	8005176 <UART_SetConfig+0x134e>
 800514e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005152:	e010      	b.n	8005176 <UART_SetConfig+0x134e>
 8005154:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005158:	e00d      	b.n	8005176 <UART_SetConfig+0x134e>
 800515a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515e:	e00a      	b.n	8005176 <UART_SetConfig+0x134e>
 8005160:	f241 5355 	movw	r3, #5461	; 0x1555
 8005164:	e007      	b.n	8005176 <UART_SetConfig+0x134e>
 8005166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516a:	e004      	b.n	8005176 <UART_SetConfig+0x134e>
 800516c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005170:	e001      	b.n	8005176 <UART_SetConfig+0x134e>
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6852      	ldr	r2, [r2, #4]
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	b29b      	uxth	r3, r3
 8005188:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800518a:	e002      	b.n	8005192 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	76fb      	strb	r3, [r7, #27]
        break;
 8005190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b0f      	cmp	r3, #15
 8005196:	d908      	bls.n	80051aa <UART_SetConfig+0x1382>
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519e:	d204      	bcs.n	80051aa <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e001      	b.n	80051ae <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80051ca:	7efb      	ldrb	r3, [r7, #27]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	0001e848 	.word	0x0001e848
 80051e0:	0003d090 	.word	0x0003d090
 80051e4:	0007a120 	.word	0x0007a120
 80051e8:	000f4240 	.word	0x000f4240
 80051ec:	00145855 	.word	0x00145855
 80051f0:	00186a00 	.word	0x00186a00
 80051f4:	001e8480 	.word	0x001e8480
 80051f8:	0028b0aa 	.word	0x0028b0aa
 80051fc:	003d0900 	.word	0x003d0900
 8005200:	007a1200 	.word	0x007a1200

08005204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01a      	beq.n	800531a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005302:	d10a      	bne.n	800531a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005358:	f7fb fe78 	bl	800104c <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b08      	cmp	r3, #8
 800536a:	d10e      	bne.n	800538a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800536c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f82c 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e022      	b.n	80053d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d10e      	bne.n	80053b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f816 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e00c      	b.n	80053d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e062      	b.n	80054b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d05e      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fb fe2b 	bl	800104c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11d      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005416:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e045      	b.n	80054d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d02e      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005460:	d126      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800547a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e00f      	b.n	80054d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d08d      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_UARTEx_DisableFifoMode+0x16>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e027      	b.n	800553e <HAL_UARTEx_DisableFifoMode+0x66>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2224      	movs	r2, #36	; 0x24
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800551c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800555e:	2302      	movs	r3, #2
 8005560:	e02d      	b.n	80055be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	; 0x24
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f850 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055da:	2302      	movs	r3, #2
 80055dc:	e02d      	b.n	800563a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	; 0x24
 80055ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f812 	bl	8005644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800564c:	4a2f      	ldr	r2, [pc, #188]	; (800570c <UARTEx_SetNbDataToProcess+0xc8>)
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005656:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800565a:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <UARTEx_SetNbDataToProcess+0xcc>)
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005664:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005680:	e03d      	b.n	80056fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005686:	2308      	movs	r3, #8
 8005688:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	0f5b      	lsrs	r3, r3, #29
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80056aa:	7fbb      	ldrb	r3, [r7, #30]
 80056ac:	7f3a      	ldrb	r2, [r7, #28]
 80056ae:	f107 0120 	add.w	r1, r7, #32
 80056b2:	440a      	add	r2, r1
 80056b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	7f3a      	ldrb	r2, [r7, #28]
 80056be:	f107 0120 	add.w	r1, r7, #32
 80056c2:	440a      	add	r2, r1
 80056c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	7f7a      	ldrb	r2, [r7, #29]
 80056d8:	f107 0120 	add.w	r1, r7, #32
 80056dc:	440a      	add	r2, r1
 80056de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	7f7a      	ldrb	r2, [r7, #29]
 80056e8:	f107 0120 	add.w	r1, r7, #32
 80056ec:	440a      	add	r2, r1
 80056ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056fe:	bf00      	nop
 8005700:	3724      	adds	r7, #36	; 0x24
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	08005c94 	.word	0x08005c94
 8005710:	08005c9c 	.word	0x08005c9c

08005714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005714:	b084      	sub	sp, #16
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	f107 001c 	add.w	r0, r7, #28
 8005722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	2b01      	cmp	r3, #1
 800572a:	d122      	bne.n	8005772 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa28 	bl	8005bbc <USB_CoreReset>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e01a      	b.n	80057a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa1c 	bl	8005bbc <USB_CoreReset>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
 800579a:	e005      	b.n	80057a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b4:	b004      	add	sp, #16
 80057b6:	4770      	bx	lr

080057b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f023 0201 	bic.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
 8005804:	e00b      	b.n	800581e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e001      	b.n	800581e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e003      	b.n	8005826 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800581e:	2032      	movs	r0, #50	; 0x32
 8005820:	f7fb fc20 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005830:	b084      	sub	sp, #16
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800583e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e009      	b.n	8005864 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3340      	adds	r3, #64	; 0x40
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3301      	adds	r3, #1
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b0e      	cmp	r3, #14
 8005868:	d9f2      	bls.n	8005850 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11c      	bne.n	80058aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e005      	b.n	80058b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	4619      	mov	r1, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d0:	461a      	mov	r2, r3
 80058d2:	680b      	ldr	r3, [r1, #0]
 80058d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058d6:	2103      	movs	r1, #3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f93d 	bl	8005b58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058de:	2110      	movs	r1, #16
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8f1 	bl	8005ac8 <USB_FlushTxFifo>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f90f 	bl	8005b14 <USB_FlushRxFifo>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	461a      	mov	r2, r3
 8005908:	2300      	movs	r3, #0
 800590a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	461a      	mov	r2, r3
 8005914:	2300      	movs	r3, #0
 8005916:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	461a      	mov	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	e043      	b.n	80059b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005940:	d118      	bne.n	8005974 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	461a      	mov	r2, r3
 8005956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e013      	b.n	8005986 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	461a      	mov	r2, r3
 800596c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e008      	b.n	8005986 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	2300      	movs	r3, #0
 8005984:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	461a      	mov	r2, r3
 8005994:	2300      	movs	r3, #0
 8005996:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	461a      	mov	r2, r3
 80059a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	3301      	adds	r3, #1
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3b7      	bcc.n	800592a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e043      	b.n	8005a48 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d6:	d118      	bne.n	8005a0a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e013      	b.n	8005a1c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	461a      	mov	r2, r3
 8005a02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e008      	b.n	8005a1c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3301      	adds	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3b7      	bcc.n	80059c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <USB_DevInit+0x294>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f043 0208 	orr.w	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d107      	bne.n	8005ab2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005abe:	b004      	add	sp, #16
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	803c3800 	.word	0x803c3800

08005ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	f043 0220 	orr.w	r2, r3, #32
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <USB_FlushTxFifo+0x48>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e006      	b.n	8005b02 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d0f0      	beq.n	8005ae2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	00030d40 	.word	0x00030d40

08005b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2210      	movs	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <USB_FlushRxFifo+0x40>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d0f0      	beq.n	8005b26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	00030d40 	.word	0x00030d40

08005b58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005baa:	2003      	movs	r0, #3
 8005bac:	f7fb fa5a 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <USB_CoreReset+0x64>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e01b      	b.n	8005c12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	daf2      	bge.n	8005bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <USB_CoreReset+0x64>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e006      	b.n	8005c12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d0f0      	beq.n	8005bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	00030d40 	.word	0x00030d40

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4e0d      	ldr	r6, [pc, #52]	; (8005c5c <__libc_init_array+0x38>)
 8005c28:	4c0d      	ldr	r4, [pc, #52]	; (8005c60 <__libc_init_array+0x3c>)
 8005c2a:	1ba4      	subs	r4, r4, r6
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	2500      	movs	r5, #0
 8005c30:	42a5      	cmp	r5, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	4e0b      	ldr	r6, [pc, #44]	; (8005c64 <__libc_init_array+0x40>)
 8005c36:	4c0c      	ldr	r4, [pc, #48]	; (8005c68 <__libc_init_array+0x44>)
 8005c38:	f000 f820 	bl	8005c7c <_init>
 8005c3c:	1ba4      	subs	r4, r4, r6
 8005c3e:	10a4      	asrs	r4, r4, #2
 8005c40:	2500      	movs	r5, #0
 8005c42:	42a5      	cmp	r5, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c4c:	4798      	blx	r3
 8005c4e:	3501      	adds	r5, #1
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c56:	4798      	blx	r3
 8005c58:	3501      	adds	r5, #1
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	08009cf4 	.word	0x08009cf4
 8005c60:	08009cf4 	.word	0x08009cf4
 8005c64:	08009cf4 	.word	0x08009cf4
 8005c68:	08009cf8 	.word	0x08009cf8

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
